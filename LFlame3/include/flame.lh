#include <Loci.h>

// =============================================================================
// General variables.
// =============================================================================

// Name of the current case.
$type caseName param<std::string>;

// =============================================================================
// Variables related to periodic boundaries
// =============================================================================

$type periodicTransform store<Loci::rigid_transform>;

// =============================================================================
// Variables related to solver time integration algorithm.
// =============================================================================

// Number of time steps.
$type nTimeSteps param<int>;

// Time step size specified by user.
$type timeStepSize param<double>;

// Conditional variable indicating the end of time steps.
$type timeStepFinished param<bool>;

// Initial value of cycle number.
$type timeStep_ic param<int>;

// Current cycle number.
$type timeStep param<int>;

// Initial value of simulation time.
$type stime_ic param<double>;

// Current simulation time.
$type stime param<double>;

// Time integration method.
$type timeIntegrationMethod param<string>;

// Constraints that represent current time integration method.
$type timeIntegrationRK Constraint;

// =============================================================================
// Variables related to solver printing.
// =============================================================================

$type printOptions param<options_list>;

$type printSettings param<flame::PrintSettings>;

$type doPrint param<bool>;

// =============================================================================
// Variables related to solver plotting and printing.
// =============================================================================

// User supplied options for printing.
$type printOptions param<options_list>;

// Internal parameter to store parsed user specified printing options.
$type printSettings param<flame::PrintSettings>;

// Conditional for writing print variables in an iteration.
$type doPrint param<bool>;

// User supplied options for plotting.
$type plotOptions param<options_list>;

// Internal parameter to store parsed user specified plotting options.
$type plotSettings param<flame::PlotSettings>;

// Conditional for writing grid topology.
$type doPlotTopology param<bool>;

// Conditional for writing grid node positions.
$type doPlotGridPos param<bool>;

// Conditional for writing output variables in an iteration.
$type doPlot param<bool>;

// List of postfixes to use while writing output data.
$type plotPostfix param<std::string>;

// Constraint for parametrix variables.
//$type plotNodal_X Constraint;

$type boundary_names store<string>;

// =============================================================================
// Output variable.
// =============================================================================

$type solution store<double>;

// =============================================================================
// Variables related to solver initial conditions.
// =============================================================================

// Initial gage pressure (at cell).
$type gagePressure_ic store<double>;

// Initial velocity (at cell).
$type velocity_ic store<Loci::vector3d<double> >;

// Initial temperature (at cell).
$type temperature_ic store<double>;

// Initial species mass fractions (at cell).
$type speciesY_ic storeVec<double>;

// Initial mixture gas molecular weight (at cell).
$type mixtureW_ic store<double>;

// Initial mixture gas constant (at cell).
$type mixtureR_ic store<double>;

// Initial mixture adiabatic exponent (at  cell).
$type mixtureGamma_ic store<double>;

// Initial mixture specific heat at constant pressure (at cell).
//$type mixtureCp_ic store<double>;

// Initial mixture enthalpy (at cell).
//$type mixtureEnthalpy_ic store<double>;

// =============================================================================
// Parameters of the solver.
// =============================================================================

// User supplied parameter for specifying whether the flow is inviscid, laminar
// or turbulent.
$type flowRegime param<std::string>;

// Constraints to distinguish between inviscid and viscous flows.
$type isInviscidFlow param<bool>;
$type isLaminarFlow param<bool>;
$type inviscidFlow Constraint;
$type laminarFlow Constraint;

// Ambient pressure.
$type Pambient param<double>;

// =============================================================================
// Volume integrated quantities.
// =============================================================================

$type totalVolume param<double>;

$type totalKE param<double>;

// =============================================================================
// Boundary condition constraints.
// =============================================================================

$type reflecting_BC Constraint;

// =============================================================================
// Variables common to both the single- and multi-species solver state.
// =============================================================================

// Gage pressure (at cell).
$type gagePressure store<double>;

// Gage pressure (at face).
$type gagePressure_f store<double>;

// Velocity (at cell).
$type velocity store<Loci::vector3d<double> >;

// velocity (at face).
$type velocity_f store<Loci::vector3d<double> >;

// Temperature (at cell).
$type temperature store<double>;

// Temperature (at face).
$type temperature_f store<double>;

// Density (at cell).
$type rho store<double>;

// Density (at face).
$type rho_f store<double>;

// =============================================================================
// Variables related to single-species solver state.
// =============================================================================

// Vector of single-species convective flux (at face).
$type ssConvectiveFlux_f store<Loci::Array<double, 5> >;

// Vector of single-species diffusive flux (at face).
$type ssDiffusiveFlux_f store<Loci::Array<double, 5> >;

// Vector of single-species residual (at face).
$type ssResidual store<Loci::Array<double, 5> >;

// =============================================================================
// Variables related to multi-species solver state.
// =============================================================================

// Vector of species mass fractions (at cell): [-].
$type speciesY storeVec<double>;

// Vector of species mass fractions (at face): [-].
$type speciesY_f storeVec<double>;

// Molecular weight of mixture (at cell): [kg/kmol].
$type mixtureW store<double>;

// Molecular weight of mixture (at face): [kg/kmol].
$type mixtureW_f store<double>;

// Gas constant of mixture (at cell): [J/kg.K].
$type mixtureR store<double>;

// Gas constant of mixture (at face): [J/kg.K].
$type mixtureR_f store<double>;

// Adiabatic index of mixture (at cell): [-]
$type mixtureGamma store<double>;

// Adiabatic index of mixture (at face): [-]
$type mixtureGamma_f store<double>;

// Mixture specific heat at constant pressure (at cell); [J/kg.K]
$type mixtureCp store<double>;

// Mixture enthalpy (at cell); [J/kg.K]
$type mixtureEnthalpy store<double>;

// Fraction Wk/mixtureW of the species (at cell): [-]
//$type speciesWFrac storeVec<double>;

// Fraction mixtureW/Wk of the species (at cell): [-]
//$type speciesWRFrac storeVec<double>;

// Vector of multi-species convective flux (at face).
$type msConvectiveFlux_f storeVec<double>;

// Vector of multi-species diffusive flux (at faces).
$type msDiffusiveFlux_f storeVec<double>;

// Vector of multi-species residual (at cells).
$type msResidual storeVec<double>;

// =============================================================================
// Variables related to Runge-Kutta time integration.
// =============================================================================
$type rkFinished param<bool>;
$type dtRK param<double>;
$type rkOrder param<int>;
$type rkOrderWeights param<std::vector<Loci::Array<double, 3> > >;
$type lastRK param<bool>;

// =============================================================================
// Variables related to EoS
// =============================================================================
$type eosType param<std::string>;
$type idealGas Constraint;

// =============================================================================
// Variables related to milti-species management.
// =============================================================================

// Constraints to distinguish between single-species vs multi-species mode.
$type multiSpecies Constraint;
$type singleSpecies Constraint;

// Boolean parameters to distinguish between single-species vs multi-species
// mode.
$type isMultiSpecies param<bool>;
$type isSingleSpecies param<bool>;

// Universal gas constant: [J/kmol.K].
$type Runiv param<double>;

// Number of species.
$type Ns param<int>;

// Name of the species: [-].
$type speciesNames param<std::vector<std::string> >;

// Molecular weight of the species: [kg/kmol].
$type speciesW param<std::vector<double> >;

// Ratio of specific heats of the species: [-].
$type speciesGamma param<std::vector<double> >;

// Specific gas constant of the species: [J/kg.K].
$type speciesR param<std::vector<double> >;

// =============================================================================
// Variables related to computing, plotting and printing CFL number.
// =============================================================================

// Maximum contravariant velocity flux (at face).
$type maxUt_f store<double>;

// Time step size neutral CFL number (at cell).
$type cflpdt store<double>;

// CFL number (at cell).
$type cfl store<double>;

// Maximum and minimum CFL value (over all cells).
$type maxCFL param<double>;
$type minCFL param<double>;

// Merge this functionality with printSettings
$type cflPrintFrequency param<int>;
$type doPrintCFL param<bool>;