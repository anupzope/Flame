#include <Loci.h>

#include <species.hh>

// =============================================================================
// General variables.
// =============================================================================

// Name of the current case.
$type caseName param<std::string>;

// =============================================================================
// Variables related to periodic boundaries
// =============================================================================

$type periodicTransform store<Loci::rigid_transform>;

// =============================================================================
// Variables related to solver time integration algorithm.
// =============================================================================

// Number of time steps.
$type nTimeSteps param<int>;

// Time step size specified by user.
$type timeStepSize param<double>;

// Conditional variable indicating the end of time steps.
$type timeStepFinished param<bool>;

// Current cycle number.
$type timeStep param<int>;

// Current simulation time.
$type stime param<double>;

// Time integration method.
$type timeIntegrationMethod param<string>;

// Constraints that represent current time integration method.
$type timeIntegrationRK Constraint;

// =============================================================================
// Variables related to solver printing.
// =============================================================================

$type printOptions param<options_list>;

$type printSettings param<flame::PrintSettings>;

$type doPrint param<bool>;

$type createPrintParameterFile blackbox<int>;

$type printParameterDBIdx param<int>;

// =============================================================================
// Variables related to solver plotting and printing.
// =============================================================================

// User supplied options for printing.
$type printOptions param<options_list>;

// Internal parameter to store parsed user specified printing options.
$type printSettings param<flame::PrintSettings>;

// Conditional for writing print variables in an iteration.
$type doPrint param<bool>;

// User supplied options for plotting.
$type plotOptions param<options_list>;

// Internal parameter to store parsed user specified plotting options.
$type plotSettings param<flame::PlotSettings>;

// Conditional for writing grid topology.
$type doPlotTopology param<bool>;

// Conditional for writing grid node positions.
$type doPlotGridPos param<bool>;

// Conditional for writing output variables in an iteration.
$type doPlot param<bool>;

// List of postfixes to use while writing output data.
$type plotPostfix param<std::string>;

// Constraint for parametrix variables.
//$type plotNodal_X Constraint;

$type boundary_names store<string>;

// =============================================================================
// Output variable.
// =============================================================================

$type solution store<double>;

// =============================================================================
// Variables related to solver restart management.
// =============================================================================

// Options list for specifying restart settings.
$type restartOptions param<options_list>;

// Parameter to store restart settings.
$type restartSettings param<RestartSettings>;

// Conditional parameter for writing restart state of the solver.
$type doRestart param<bool>;

// Postfix for the restart directory.
$type restartPostfix param<std::string>;

// Restart directory;
$type restartDirectory param<std::string>;

// =============================================================================
// Variables related to solver initial conditions.
// =============================================================================

$type hasICDirectory param<bool>;
$type icDirectory param<std::string>;
$type withICDirectory Constraint;
$type withoutICDirectory Constraint;

// User supplied options list for specifying uniform initial conditions.
$type initialConditions param<options_list>;

// Params to store the initial conditions specified by initialConditions
// options_list.
$type icGagePressure param<double>;
$type icTemperature param<double>;
$type icVelocity param<Loci::vector3d<double> >;
$type icSpeciesY param<std::vector<double> >;

// User supplied options list for specifying parameters for setting up TGV
// initial conditions.
$type initialConditionsTGV param<options_list>;

// Param to store the TGV initial condition parameters specified by
// initialConditionsTGV options_list.
$type tgvICParameters param<TGVICParameters>;

// Initial value of cycle number.
$type timeStep_ic param<int>;

// Initial value of simulation time.
$type stime_ic param<double>;

// Initial gage pressure (at cell).
$type gagePressure_ic store<double>;

// Initial velocity (at cell).
$type velocity_ic store<Loci::vector3d<double> >;

// Initial temperature (at cell).
$type temperature_ic store<double>;

// Initial species mass fractions (at cell).
$type speciesY_ic storeVec<double>;

// =============================================================================
// Parameters of the solver.
// =============================================================================

// User supplied parameter for specifying whether the flow is inviscid, laminar
// or turbulent.
$type flowRegime param<std::string>;

// Constraints to distinguish between inviscid and viscous flows.
$type isInviscidFlow param<bool>;
$type isViscousFlow param<bool>;
$type isLaminarFlow param<bool>;
$type isTurbulentFlow param<bool>;
$type inviscidFlow Constraint;
$type viscousFlow Constraint;
$type laminarFlow Constraint;
$type turbulentFlow Constraint;

// Ambient pressure.
$type Pambient param<double>;

// =============================================================================
// Volume integrated quantities.
// =============================================================================

$type totalVolume param<double>;

$type totalKineticEnergy param<double>;

$type totalEnstrophy param<double>;

// =============================================================================
// Boundary condition constraints.
// =============================================================================

$type reflecting_BC Constraint;
$type viscousWall_BC Constraint;
$type adiabatic_BCoption Constraint;
$type heatFlux_BCoption Constraint;
$type heatFlux_BC store<double>;
$type T_BCoption Constraint;
$type T_BC store<double>;

// =============================================================================
// Variables related to model of transport properties.
// =============================================================================

$type speciesViscosityModel param<std::string>;
$type speciesViscosityModel_Constant Constraint;
$type speciesViscosityModel_Sutherland Constraint;

$type mixtureViscosityModel param<std::string>;
$type mixtureViscosityModel_Standard Constraint;
$type mixtureViscosityModel_Wilke Constraint;

$type speciesConductivityModel param<std::string>;
$type speciesConductivityModel_Constant Constraint;
$type speciesConductivityModel_Sutherland Constraint;

$type mixtureConductivityModel param<std::string>;
$type mixtureConductivityModel_Standard Constraint;
$type mixtureConductivityModel_PrandtlNumber Constraint;
$type mixtureConductivityModel_Wilke Constraint;

// =============================================================================
// Variables related to model of thermodynamic properties.
// =============================================================================

$type thermodynamicModel param<std::string>;
$type caloricallyPerfectGas Constraint;

// =============================================================================
// Variables common to both the single- and multi-species solver state.
// =============================================================================

// Gage pressure (at cell).
$type gagePressure store<double>;

// Gage pressure (at face).
$type gagePressure_f store<double>;

// Velocity (at cell).
$type velocity store<Loci::vector3d<double> >;

// velocity (at face).
$type velocity_f store<Loci::vector3d<double> >;

// Temperature (at cell).
$type temperature store<double>;

// Temperature (at face).
$type temperature_f store<double>;

// Density (at cell).
$type density store<double>;

// Density (at face).
$type density_f store<double>;

// Viscosity (at cell).
$type viscosity store<double>;

// Viscosity (at face).
$type viscosity_f store<double>;

// Conductivity (at cell).
$type conductivity store<double>;

// Conductivity (at face).
$type conductivity_f store<double>;

// Shear stress (at face).
$type shearStress_f store<SymmetricTensor>;

// Strain rate tensor (at cell).
$type strainRate store<SymmetricTensor>;

// Vorticity vector (at cell). It is twice the rotation rate vector. Rotation
// rate vector is the axial vector of the rotation rate tensor.
$type vorticity store<Loci::vector3d<double> >;

// Magnitude of the strain rate (at cell).
$type strainRateMagnitude store<double>;

// Magnitude of the vorticity (at cell).
$type vorticityMagnitude store<double>;

// Q-criterion (at cell).
$type Qcriterion store<double>;

// Heat source (at face).
$type heat_f store<double>;

// Heat flux on viscousWall boundary (at face).
$type viscousWallHeat_f store<double>;

// Temperature on viscousWall boundary (at face).
$type viscousWallTemperature_f store<double>;

// Constraint-only store for faces on viscousWall boundary that have specified
// heat flux.
$type viscousWallHeatFluxFaces store<bool>;

// =============================================================================
// Variables related to single-species solver state.
// =============================================================================

// Vector of single-species convective flux (at face).
$type ssConvectiveFlux_f store<Loci::Array<double, 5> >;

// Vector of single-species diffusive flux (at face).
$type viscousFlux_f store<Loci::Array<double, 4> >;

// Vector of single-species residual (at cell).
$type ssResidual store<Loci::Array<double, 5> >;

// =============================================================================
// Variables related to multi-species solver state.
// =============================================================================

// Vector of species mass fractions (at cell): [-].
$type speciesY storeVec<double>;

// Vector of species mass fractions (at face): [-].
$type speciesY_f storeVec<double>;

// Vector of species molar fractions (at cell): [-].
$type speciesX storeVec<double>;

// Vector of species molar fractions (at face): [-].
$type speciesX_f storeVec<double>;

// Molecular weight of mixture (at cell): [kg/kmol].
$type mixtureW store<double>;

// Molecular weight of mixture (at face): [kg/kmol].
$type mixtureW_f store<double>;

// Gas constant of mixture (at cell): [J/kg.K].
$type mixtureR store<double>;

// Gas constant of mixture (at face): [J/kg.K].
$type mixtureR_f store<double>;

// Adiabatic index of mixture (at cell): [-]
//$type mixtureGamma store<double>;

// Adiabatic index of mixture (at face): [-]
//$type mixtureGamma_f store<double>;

// Mixture specific heat at constant pressure (at cell); [J/kg.K]
$type mixtureCp store<double>;

// Mixture specific heat at constant pressure (at face): [J/kg.K]
$type mixtureCp_f store<double>;

// Mixture enthalpy (at cell); [J/kg.K]
//$type mixtureEnthalpy store<double>;

// Fraction Wk/mixtureW of the species (at cell): [-]
//$type speciesWFrac storeVec<double>;

// Fraction mixtureW/Wk of the species (at cell): [-]
//$type speciesWRFrac storeVec<double>;

// Vector of multi-species convective flux (at face).
$type msConvectiveFlux_f storeVec<double>;

// Vector of multi-species diffusive flux (at face).
//$type msDiffusiveFlux_f storeVec<double>;

// Vector of multi-species residual (at cell).
$type msResidual storeVec<double>;

// =============================================================================
// Variables related to Runge-Kutta time integration.
// =============================================================================
$type rkFinished param<bool>;
$type dtRK param<double>;
$type rkOrder param<int>;
$type rkOrderWeights param<std::vector<Loci::Array<double, 3> > >;
$type lastRK param<bool>;

// =============================================================================
// Variables related to EoS
// =============================================================================
$type eosType param<std::string>;
$type idealGas Constraint;

// =============================================================================
// Variables related to milti-species management.
// =============================================================================

// Constraints to distinguish between single-species vs multi-species mode.
$type multiSpecies Constraint;
$type singleSpecies Constraint;

// Boolean parameters to distinguish between single-species vs multi-species
// mode.
$type isMultiSpecies param<bool>;
$type isSingleSpecies param<bool>;

// Universal gas constant: [J/kmol.K].
$type Runiv param<double>;

// Number of species.
$type Ns param<int>;

// User supplied parameter for species involved in the analysis.
$type species param<options_list>;

// Name of the species: [-].
$type speciesNames param<std::vector<std::string> >;

// Central database of species properties.
$type speciesProperties param<std::vector<flame::SpeciesProperties> >;

// Molecular weight of the species: [kg/kmol].
$type speciesW param<std::vector<double> >;

// Specific heat at constant pressure: [J/kg.K].
$type speciesConstantCp param<std::vector<double> >;

// Constant viscosity of the species: [Pa.s].
$type speciesViscosity_Constant param<std::vector<double> >;

// Parameters for Sutherland's viscosity of the species.
$type speciesViscosity_SutherlandParameters param<std::vector<Loci::Array<double, 3> > >;

// Constant conductivity of the species: [W/m.K].
$type speciesConductivity_Constant param<std::vector<double> >;

// Parameters for Sutherland's conductivity of the species.
$type speciesConductivity_SutherlandParameters param<std::vector<Loci::Array<double, 3> > >;

// Specific gas constant of the species: [J/kg.K].
$type speciesR param<std::vector<double> >;

// =============================================================================
// Variables related to computing, plotting and printing CFL number.
// =============================================================================

// Maximum contravariant velocity flux (at face).
$type maxUt_f store<double>;

// Time step size neutral CFL number (at cell).
$type cflpdt store<double>;

// CFL number (at cell).
$type cfl store<double>;

// Maximum and minimum CFL value (over all cells).
$type maxCFL param<double>;
$type minCFL param<double>;
