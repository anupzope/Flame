$include "FVM.lh"
$include "flame.lh"

#include <Loci.h>

namespace flame {

$rule pointwise(cr->cellcenter <- pmap->cl->cellcenter, pmap->ref->periodicTransform),
constraint(periodicFaces) {
  Loci::rigid_transform const & frame = $pmap->$ref->$periodicTransform;
  $cr->$cellcenter = frame.transform($pmap->$cl->$cellcenter);
}

$rule pointwise(cr->vol <- pmap->cl->vol) {
  $cr->$vol = $pmap->$cl->$vol;
}

//$rule pointwise(cr->dist_noslip <- pmap->cl->dist_noslip) {
//  $cr->$dist_noslip = $pmap->$cl->$dist_noslip ;
//}

$rule pointwise(cr->velocity <- pmap->cl->velocity, pmap->ref->periodicTransform) {
  Loci::rigid_transform const & frame = $pmap->$ref->$periodicTransform;
  $cr->$velocity = frame.rotate_vec($pmap->$cl->$velocity);
}

// this fix will allow gradients of velocity to be computed when all boundaries
// are periodic
$rule pointwise(velocity_f), constraint(ci->velocity, geom_cells) {}

$rule pointwise(cr->temperature <- pmap->cl->temperature) {
  $cr->$temperature = $pmap->$cl->$temperature;
}

// this fix will allow gradients of temperature to be computed when all
// boundaries are periodic
$rule pointwise(temperature_f), constraint(ci->temperature, geom_cells) {}


$rule pointwise(cr->gagePressure <- pmap->cl->gagePressure) {
  $cr->$gagePressure = $pmap->$cl->$gagePressure;
}

// this fix will allow gradients of gage pressure to be computed when all
// boundaries are periodic
$rule pointwise(gagePressure_f), constraint(ci->gagePressure, geom_cells) {}


$rule pointwise(cr->speciesY <- pmap->cl->speciesY) {
  $cr->$speciesY = $pmap->$cl->$speciesY;
}

// this fix will allow gradients of species mass fractions to be computed when
// all boundaries are periodic
$rule pointwise(speciesY_f <- Ns), constraint(ci->speciesY, geom_cells), prelude {
  $speciesY_f.setVecSize(*$Ns);
} {}


$rule pointwise(cr->mixtureW <- pmap->cl->mixtureW) {
  $cr->$mixtureW = $pmap->$cl->$mixtureW;
}

// this fix will allow gradients of mixture adiabatic index to be computed when
// all boundaries are periodic
$rule pointwise(mixtureW_f), constraint(ci->mixtureW, geom_cells) {}


$rule pointwise(cr->mixtureR <- pmap->cl->mixtureR) {
  $cr->$mixtureR = $pmap->$cl->$mixtureR;
}

// this fix will allow gradients of mixture gas constant to be computed when all
// boundaries are periodic
$rule pointwise(mixtureR_f), constraint(ci->mixtureR, geom_cells) {}


$rule pointwise(cr->mixtureGamma <- pmap->cl->mixtureGamma) {
  $cr->$mixtureGamma = $pmap->$cl->$mixtureGamma;
}

// this fix will allow gradients of mixture adiabatic index to be computed when
// all boundaries are periodic
$rule pointwise(mixtureGamma_f), constraint(ci->mixtureGamma, geom_cells) {}

//$rule pointwise(cr->tmu<-pmap->cl->tmu) {
//  $cr->$tmu = $pmap->$cl->$tmu ;
//}
//
//// this fix will allow gradients of u to be computed when all boundaries
//// are periodic
//$rule pointwise(tmu_f),constraint(ci->tmu,geom_cells) {}

} // end: namespace flame
