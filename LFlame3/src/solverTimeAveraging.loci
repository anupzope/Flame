$include "FVM.lh"
$include "flame.lh"

#include <Loci.h>

#define GLOG_USE_GLOG_EXPORT
#include <glog/logging.h>

#include <sys/types.h>
#include <sys/stat.h>

namespace flame {

$type timeAveragingOptions param<options_list>;

$rule default(timeAveragingOptions) {
  $timeAveragingOptions = options_list();
}

$type meanFrequency param<int>;

$type calculateMean_X Constraint;
$type meanVariable_X param<std::string>;
$type meanCount_X_ic param<int>;
$type meanCount_X_icf param<int>;
$type meanCount_X param<int>;

$type calculateMeanSquare_X Constraint;
$type meanSquareVariable_X param<std::string>;
$type meanSquareCount_X_ic param<int>;
$type meanSquareCount_X_icf param<int>;
$type meanSquareCount_X param<int>;

$type mean(X) store<double>;
$type mean_X_ic store<double>;
$type mean_X_icf store<double>;
$type mean_X store<double>;

$type meanv3d(X) store<Loci::vector3d<double> >;
$type meanv3d_X_ic store<Loci::vector3d<double> >;
$type meanv3d_X_icf store<Loci::vector3d<double> >;
$type meanv3d_X store<Loci::vector3d<double> >;

$type meanSquare(X) store<double>;
$type meanSquare_X_ic store<double>;
$type meanSquare_X_icf store<double>;
$type meanSquare_X store<double>;

$type meanSquarev3d(X) store<Loci::vector3d<double> >;
$type meanSquarev3d_X_ic store<Loci::vector3d<double> >;
$type meanSquarev3d_X_icf store<Loci::vector3d<double> >;
$type meanSquarev3d_X store<Loci::vector3d<double> >;

// =============================================================================
// Get parametric variable name.
// =============================================================================

$rule singleton(meanVariable_X),
constraint(calculateMean_X),
parametric(mean(X)),
option(disable_threading) {
  Loci::rule_impl::info const & info = get_info();
  Loci::variableSet outset = info.output_vars();
  Loci::variable out = *outset.begin();
  Loci::variable::info const & vinfo = out.get_info();

  std::string name;

  int const sz = vinfo.name.size();
  int i = 0;
  while(i < sz && vinfo.name[i] != '_') {
    ++i;
  }
  ++i;
  while(i < sz && vinfo.name[i] != '_') {
    name += vinfo.name[i];
    ++i;
  }

  $meanVariable_X = name;
}

$rule singleton(meanVariable_X),
constraint(calculateMean_X),
parametric(meanv3d(X)),
option(disable_threading) {
  Loci::rule_impl::info const & info = get_info();
  Loci::variableSet outset = info.output_vars();
  Loci::variable out = *outset.begin();
  Loci::variable::info const & vinfo = out.get_info();

  std::string name;

  int const sz = vinfo.name.size();
  int i = 0;
  while(i < sz && vinfo.name[i] != '_') {
    ++i;
  }
  ++i;
  while(i < sz && vinfo.name[i] != '_') {
    name += vinfo.name[i];
    ++i;
  }

  $meanVariable_X = name;
}

$rule singleton(meanSquareVariable_X),
constraint(calculateMeanSquare_X),
parametric(meanSquare(X)),
option(disable_threading) {
  Loci::rule_impl::info const & info = get_info();
  Loci::variableSet outset = info.output_vars();
  Loci::variable out = *outset.begin();
  Loci::variable::info const & vinfo = out.get_info();

  std::string name;

  int const sz = vinfo.name.size();
  int i = 0;
  while(i < sz && vinfo.name[i] != '_') {
    ++i;
  }
  ++i;
  while(i < sz && vinfo.name[i] != '_') {
    name += vinfo.name[i];
    ++i;
  }

  $meanSquareVariable_X = name;
}

$rule singleton(meanSquareVariable_X),
constraint(calculateMeanSquare_X),
parametric(meanSquarev3d(X)),
option(disable_threading) {
  Loci::rule_impl::info const & info = get_info();
  Loci::variableSet outset = info.output_vars();
  Loci::variable out = *outset.begin();
  Loci::variable::info const & vinfo = out.get_info();

  std::string name;

  int const sz = vinfo.name.size();
  int i = 0;
  while(i < sz && vinfo.name[i] != '_') {
    ++i;
  }
  ++i;
  while(i < sz && vinfo.name[i] != '_') {
    name += vinfo.name[i];
    ++i;
  }

  $meanSquareVariable_X = name;
}

// =============================================================================
// Generic rule to read mean count from file.
// =============================================================================

enum MeanType {
  CELL_SCALAR_MEAN,
  CELL_VECTOR3D_MEAN,
  CELL_SCALAR_MEAN_SQUARE,
  CELL_VECTOR3D_MEAN_SQUARE
};

template<MeanType TYPE>
class MeanCountFromFile : public singleton_rule {
  param<int> count_X_icf;
  const_param<std::string> icDirectory;
  const_param<std::string> caseName;
  const_param<std::string> variable_X;

public:
  MeanCountFromFile();
  virtual void compute(sequence const & seq);
};

template<MeanType TYPE>
MeanCountFromFile<TYPE>::MeanCountFromFile() {
  switch(TYPE) {
  case CELL_SCALAR_MEAN:
  case CELL_VECTOR3D_MEAN:
    name_store("meanCount_X_icf", count_X_icf);
    name_store("meanVariable_X", variable_X);
    break;
  case CELL_SCALAR_MEAN_SQUARE:
  case CELL_VECTOR3D_MEAN_SQUARE:
    name_store("meanSquareCount_X_icf", count_X_icf);
    name_store("meanSquareVariable_X", variable_X);
    break;
  }
  name_store("icDirectory", icDirectory);
  name_store("caseName", caseName);

  switch(TYPE) {
  case CELL_SCALAR_MEAN:
  case CELL_VECTOR3D_MEAN:
    input("meanVariable_X");
    output("meanCount_X_icf");
    constraint("calculateMean_X");
    break;
  case CELL_SCALAR_MEAN_SQUARE:
  case CELL_VECTOR3D_MEAN_SQUARE:
    input("meanSquareVariable_X");
    output("meanSquareCount_X_icf");
    constraint("calculateMeanSquare_X");
    break;
  }
  input("icDirectory");
  input("caseName");
  constraint("withICDirectory");
  constraint("geom_cells");

  switch(TYPE) {
  case CELL_SCALAR_MEAN:
    set_parametric_variable("mean(X)");
    break;
  case CELL_VECTOR3D_MEAN:
    set_parametric_variable("meanv3d(X)");
    break;
  case CELL_SCALAR_MEAN_SQUARE:
    set_parametric_variable("meanSquare(X)");
    break;
  case CELL_VECTOR3D_MEAN_SQUARE:
    set_parametric_variable("meanv3dSquare(X)");
    break;
  }

  disable_threading();
}

template<MeanType TYPE>
void MeanCountFromFile<TYPE>::compute(sequence const & seq) {
  if(Loci::GLOBAL_AND(seq == EMPTY)) {
    return;
  }

  std::ostringstream ss;
  switch(TYPE) {
  case CELL_SCALAR_MEAN:
  case CELL_VECTOR3D_MEAN:
    ss << *icDirectory << "mean_" << *variable_X << "_" << *caseName;
    break;
  case CELL_SCALAR_MEAN_SQUARE:
  case CELL_VECTOR3D_MEAN_SQUARE:
    ss << *icDirectory << "meanSquare_" << *variable_X << "_" << *caseName;
    break;
  }

  std::string filename(ss.str());

  struct stat buf;
  int has_file = 0;
  $[Once] {
    if(stat(filename.c_str(), &buf) == 0) {
      if(buf.st_size != 0 && S_ISREG(buf.st_mode)) {
        has_file = 1;
      } else {
        has_file = 2;
      }
    }
  }

  MPI_Bcast(&has_file, 1, MPI_INT, 0, MPI_COMM_WORLD);
  if(has_file == 2) {
    $[Once] {
      LOG(ERROR) << "Unable to find file '" << filename << "'";
    }
  }

  if(has_file) {
    entitySet readSet = ~EMPTY;
    hid_t fileId = Loci::hdf5OpenFile(filename.c_str(), H5F_ACC_RDONLY, H5P_DEFAULT);
    Loci::readContainer(fileId, "count", count_X_icf.Rep(), readSet);
    Loci::hdf5CloseFile(fileId);
  } else {
    *count_X_icf = 0;
  }
}

// =============================================================================
// Mean count
// =============================================================================

$rule unit(meanCount_X_ic),
constraint(calculateMean_X),
parametric(mean(X)) {
  $meanCount_X_ic = 0;
}

$rule unit(meanCount_X_ic),
constraint(calculateMean_X),
parametric(meanv3d(X)) {
  $meanCount_X_ic = 0;
}

// -----------------------------------------------------------------------------

Loci::register_rule<MeanCountFromFile<CELL_SCALAR_MEAN> > registerScalarMeanCountFromFile;
Loci::register_rule<MeanCountFromFile<CELL_VECTOR3D_MEAN> > registerVector3dMeanCountFromFile;

// -----------------------------------------------------------------------------

$rule apply(meanCount_X_ic <- meanCount_X_icf)[Loci::Maximum],
constraint(calculateMean_X),
parametric(mean(X)) {
  join($meanCount_X_ic, $meanCount_X_icf);
}

$rule apply(meanCount_X_ic <- meanCount_X_icf)[Loci::Maximum],
constraint(calculateMean_X),
parametric(meanv3d(X)) {
  join($meanCount_X_ic, $meanCount_X_icf);
}

// -----------------------------------------------------------------------------

$rule singleton(meanCount_X{n=0} <- meanCount_X_ic),
constraint(calculateMean_X),
parametric(mean(X)) {
  $meanCount_X{n=0} = $meanCount_X_ic;
}

$rule singleton(meanCount_X{n=0} <- meanCount_X_ic),
constraint(calculateMean_X),
parametric(meanv3d(X)) {
  $meanCount_X{n=0} = $meanCount_X_ic;
}

// -----------------------------------------------------------------------------

$rule singleton(meanCount_X{n,rk=0} <- meanCount_X{n}),
constraint(calculateMean_X),
parametric(mean(X)) {
  $meanCount_X{n,rk=0} = $meanCount_X{n};
}

$rule singleton(meanCount_X{n,rk=0} <- meanCount_X{n}),
constraint(calculateMean_X),
parametric(meanv3d(X)) {
  $meanCount_X{n,rk=0} = $meanCount_X{n};
}

// -----------------------------------------------------------------------------

$rule singleton(meanCount_X{n,rk+1} <- meanCount_X{n,rk}),
constraint(calculateMean_X),
parametric(mean(X)) {
  $meanCount_X{n,rk+1} = $meanCount_X{n,rk};
}

$rule singleton(meanCount_X{n,rk+1} <- meanCount_X{n,rk}),
constraint(calculateMean_X),
parametric(meanv3d(X)) {
  $meanCount_X{n,rk+1} = $meanCount_X{n,rk};
}

// -----------------------------------------------------------------------------

$rule singleton(
  meanCount_X{n+1}
  <-
  meanCount_X{n,rk}, meanFrequency{n,rk}, timeStep{n,rk}
), constraint(calculateMean_X), conditional(rkFinished{n,rk}),
parametric(mean(X)) {
  if($timeStep{n,rk}%$meanFrequency{n,rk} == 0) {
    $meanCount_X{n+1} = 1;
  } else {
    $meanCount_X{n+1} = $meanCount_X{n,rk} + 1;
  }
}

$rule singleton(
  meanCount_X{n+1}
  <-
  meanCount_X{n,rk}, meanFrequency{n,rk}, timeStep{n,rk}
), constraint(calculateMean_X), conditional(rkFinished{n,rk}),
parametric(meanv3d(X)) {
  if($timeStep{n,rk}%$meanFrequency{n,rk} == 0) {
    $meanCount_X{n+1} = 1;
  } else {
    $meanCount_X{n+1} = $meanCount_X{n,rk} + 1;
  }
}

// =============================================================================
// Mean square count
// =============================================================================

$rule unit(meanSquareCount_X_ic),
constraint(calculateMeanSquare_X),
parametric(meanSquare(X)) {
  $meanSquareCount_X_ic = 0;
}

$rule unit(meanSquareCount_X_ic),
constraint(calculateMeanSquare_X),
parametric(meanSquarev3d(X)) {
  $meanSquareCount_X_ic = 0;
}

// -----------------------------------------------------------------------------

Loci::register_rule<MeanCountFromFile<CELL_SCALAR_MEAN_SQUARE> > registerScalarMeanSquareCountFromFile;
Loci::register_rule<MeanCountFromFile<CELL_VECTOR3D_MEAN_SQUARE> > registerVector3dMeanSquareCountFromFile;

// -----------------------------------------------------------------------------

$rule apply(meanSquareCount_X_ic <- meanSquareCount_X_icf)[Loci::Maximum],
constraint(calculateMeanSquare_X),
parametric(meanSquare(X)) {
  join($meanSquareCount_X_ic, $meanSquareCount_X_icf);
}

$rule apply(meanSquareCount_X_ic <- meanSquareCount_X_icf)[Loci::Maximum],
constraint(calculateMeanSquare_X),
parametric(meanSquarev3d(X)) {
  join($meanSquareCount_X_ic, $meanSquareCount_X_icf);
}

// -----------------------------------------------------------------------------

$rule singleton(meanSquareCount_X{n=0} <- meanSquareCount_X_ic),
constraint(calculateMeanSquare_X),
parametric(meanSquare(X)) {
  $meanSquareCount_X{n=0} = $meanSquareCount_X_ic;
}

$rule singleton(meanSquareCount_X{n=0} <- meanSquareCount_X_ic),
constraint(calculateMeanSquare_X),
parametric(meanSquarev3d(X)) {
  $meanSquareCount_X{n=0} = $meanSquareCount_X_ic;
}

// -----------------------------------------------------------------------------

$rule singleton(meanSquareCount_X{n,rk=0} <- meanSquareCount_X{n}),
constraint(calculateMeanSquare_X),
parametric(meanSquare(X)) {
  $meanSquareCount_X{n,rk=0} = $meanSquareCount_X{n};
}

$rule singleton(meanSquareCount_X{n,rk=0} <- meanSquareCount_X{n}),
constraint(calculateMeanSquare_X),
parametric(meanSquarev3d(X)) {
  $meanSquareCount_X{n,rk=0} = $meanSquareCount_X{n};
}

// -----------------------------------------------------------------------------

$rule singleton(meanSquareCount_X{n,rk+1} <- meanSquareCount_X{n,rk}),
constraint(calculateMeanSquare_X),
parametric(meanSquare(X)) {
  $meanSquareCount_X{n,rk+1} = $meanSquareCount_X{n,rk};
}

$rule singleton(meanSquareCount_X{n,rk+1} <- meanSquareCount_X{n,rk}),
constraint(calculateMeanSquare_X),
parametric(meanSquarev3d(X)) {
  $meanSquareCount_X{n,rk+1} = $meanSquareCount_X{n,rk};
}

// -----------------------------------------------------------------------------

$rule singleton(
  meanSquareCount_X{n+1}
  <-
  meanSquareCount_X{n,rk}, meanFrequency{n,rk}, timeStep{n,rk}
), constraint(calculateMeanSquare_X), conditional(rkFinished{n,rk}),
parametric(meanSquare(X)) {
  if($timeStep{n,rk}%$meanFrequency{n,rk} == 0) {
    $meanSquareCount_X{n+1} = 1;
  } else {
    $meanSquareCount_X{n+1} = $meanSquareCount_X{n,rk} + 1;
  }
}

$rule singleton(
  meanSquareCount_X{n+1}
  <-
  meanSquareCount_X{n,rk}, meanFrequency{n,rk}, timeStep{n,rk}
), constraint(calculateMeanSquare_X), conditional(rkFinished{n,rk}),
parametric(meanSquarev3d(X)) {
  if($timeStep{n,rk}%$meanFrequency{n,rk} == 0) {
    $meanSquareCount_X{n+1} = 1;
  } else {
    $meanSquareCount_X{n+1} = $meanSquareCount_X{n,rk} + 1;
  }
}

// =============================================================================
// Time average of scalar quantities
// =============================================================================

$rule unit(mean_X_ic),
constraint(geom_cells, calculateMean_X),
parametric(mean(X)) {
  $mean_X_ic = 0.0;
}

$rule pointwise(
  OUTPUT
  <-
  mean_X, meanCount_X, meanVariable_X,
  timeStep, restartDirectory, caseName, $n
), conditional(doRestart), parametric(mean(X)),
option(disable_threading), prelude {
  if(*$timeStep != 0 && *$$n != 0) {
    std::ostringstream ss;
    ss << *$restartDirectory << "mean_" << *$meanVariable_X
      << "_" << *$caseName;

    std::string filename(ss.str());

    $[Once] {
      LOG(INFO) << "writing restart state for mean of "
        << *$meanVariable_X << " at time step " << *$timeStep
        << " to file '" << filename << "'";
    }

    hid_t fileId = Loci::hdf5CreateFile(filename.c_str(), H5F_ACC_TRUNC, H5P_DEFAULT, H5P_DEFAULT);
    Loci::writeContainer(fileId, "mean", $mean_X.Rep());
    Loci::writeContainer(fileId, "count", $meanCount_X.Rep());
    Loci::hdf5CloseFile(fileId);
  }
};

$rule pointwise(
  mean_X_icf
  <-
  meanVariable_X, icDirectory, caseName
), constraint(geom_cells, withICDirectory),
parametric(mean(X)), option(disable_threading), prelude {
  std::ostringstream ss;
  ss << *$icDirectory << "mean_" << *$meanVariable_X << "_" << *$caseName;

  std::string filename(ss.str());

  Loci::entitySet readSet = entitySet(seq);
  hid_t fileId = Loci::hdf5OpenFile(filename.c_str(), H5F_ACC_RDONLY, H5P_DEFAULT);
  Loci::readContainer(fileId, "mean", $mean_X_icf.Rep(), readSet);
  Loci::hdf5CloseFile(fileId);
};

$rule apply(mean_X_ic <- mean_X_icf)[Loci::Summation],
parametric(mean(X)) {
  join($mean_X_ic, $mean_X_icf);
}

$rule pointwise(mean_X{n=0} <- mean_X_ic),
parametric(mean(X)) {
  $mean_X{n=0} = $mean_X_ic;
}

$rule pointwise(mean_X{n,rk=0} <- mean_X{n}),
constraint(calculateMean_X, mean_X{n}),
inplace(mean_X{n,rk=0}|mean_X{n}),
parametric(mean(X)), prelude {};

$rule pointwise(mean(X){n,rk} <- mean_X{n,rk}) {
  $mean(X){n,rk} = $mean_X{n,rk};
}

$rule pointwise(mean_X{n,rk+1} <- mean(X){n,rk}),
inplace(mean_X{n,rk+1}|mean(X){n,rk}),
parametric(mean(X)), prelude {};

$type X store<double>;
$rule pointwise(
  mean_X{n+1}
  <-
  mean_X{n,rk}, X{n,rk}, meanFrequency{n,rk},
  meanCount_X{n,rk}, timeStep{n,rk}
), conditional(rkFinished{n,rk}), parametric(mean(X)) {
  if($timeStep{n,rk}%$meanFrequency{n,rk} == 0) {
    $mean_X{n+1} = $X{n,rk};
  } else {
    $mean_X{n+1} = ($X{n,rk} - $mean_X{n,rk})/($meanCount_X{n,rk}+1);
  }
}

// =============================================================================
// Time average of vector3d quantities
// =============================================================================

$rule unit(meanv3d_X_ic),
constraint(geom_cells, calculateMean_X),
parametric(meanv3d(X)) {
  $meanv3d_X_ic = Loci::vector3d<double>(0.0, 0.0, 0.0);
}

$rule pointwise(
  OUTPUT
  <-
  meanv3d_X, meanCount_X, meanVariable_X,
  timeStep, restartDirectory, caseName, $n
), conditional(doRestart), parametric(meanv3d(X)),
option(disable_threading), prelude {
  if(*$timeStep != 0 && *$$n != 0) {
    std::ostringstream ss;
    ss << *$restartDirectory << "mean_" << *$meanVariable_X
      << "_" << *$caseName;

    std::string filename(ss.str());

    $[Once] {
      LOG(INFO) << "writing restart state for mean of "
        << *$meanVariable_X << " at time step " << *$timeStep
        << " to file '" << filename << "'";
    }

    hid_t fileId = Loci::hdf5CreateFile(filename.c_str(), H5F_ACC_TRUNC, H5P_DEFAULT, H5P_DEFAULT);
    Loci::writeContainer(fileId, "mean", $meanv3d_X.Rep());
    Loci::writeContainer(fileId, "count", $meanCount_X.Rep());
    Loci::hdf5CloseFile(fileId);
  }
};

$rule pointwise(
  meanv3d_X_icf
  <-
  meanVariable_X, icDirectory, caseName
), constraint(geom_cells, withICDirectory),
parametric(meanv3d(X)), option(disable_threading), prelude {
  std::ostringstream ss;
  ss << *$icDirectory << "mean_" << *$meanVariable_X << "_" << *$caseName;

  std::string filename(ss.str());

  Loci::entitySet readSet = entitySet(seq);
  hid_t fileId = Loci::hdf5OpenFile(filename.c_str(), H5F_ACC_RDONLY, H5P_DEFAULT);
  Loci::readContainer(fileId, "mean", $meanv3d_X_icf.Rep(), readSet);
  Loci::hdf5CloseFile(fileId);
};

$rule apply(meanv3d_X_ic <- meanv3d_X_icf)[Loci::Summation],
parametric(meanv3d(X)) {
  join($meanv3d_X_ic, $meanv3d_X_icf);
}

$rule pointwise(meanv3d_X{n=0} <- meanv3d_X_ic),
parametric(meanv3d(X)) {
  $meanv3d_X{n=0} = $meanv3d_X_ic;
}

$rule pointwise(meanv3d_X{n,rk=0} <- meanv3d_X{n}),
constraint(calculateMean_X, meanv3d_X{n}),
inplace(meanv3d_X{n,rk=0}|meanv3d_X{n}),
parametric(meanv3d(X)), prelude {};

$rule pointwise(meanv3d(X){n,rk} <- meanv3d_X{n,rk}) {
  $meanv3d(X){n,rk} = $meanv3d_X{n,rk};
}

$rule pointwise(meanv3d_X{n,rk+1} <- meanv3d(X){n,rk}),
inplace(meanv3d_X{n,rk+1}|meanv3d(X){n,rk}),
parametric(meanv3d(X)), prelude {};

$type X store<Loci::vector3d<double> >;
$rule pointwise(
  meanv3d_X{n+1}
  <-
  meanv3d_X{n,rk}, X{n,rk}, meanFrequency{n,rk},
  meanCount_X{n,rk}, timeStep{n,rk}
), conditional(rkFinished{n,rk}), parametric(meanv3d(X)) {
  if($timeStep{n,rk}%$meanFrequency{n,rk} == 0) {
    $meanv3d_X{n+1} = $X{n,rk};
  } else {
    $meanv3d_X{n+1} = ($X{n,rk} - $meanv3d_X{n,rk})/($meanCount_X{n,rk}+1);
  }
}

// =============================================================================
// Time average of square of scalar quantities
// =============================================================================

$rule unit(meanSquare_X_ic),
constraint(geom_cells, calculateMeanSquare_X),
parametric(meanSquare(X)) {
  $meanSquare_X_ic = 0.0;
}

$rule pointwise(
  OUTPUT
  <-
  meanSquare_X, meanSquareCount_X, meanSquareVariable_X,
  timeStep, restartDirectory, caseName, $n
), conditional(doRestart), parametric(meanSquare(X)),
option(disable_threading), prelude {
  if(*$timeStep != 0 && *$$n != 0) {
    std::ostringstream ss;
    ss << *$restartDirectory << "meanSquare_" << *$meanSquareVariable_X
      << "_" << *$caseName;

    std::string filename(ss.str());

    $[Once] {
      LOG(INFO) << "writing restart state for mean square of "
        << *$meanSquareVariable_X << " at time step " << *$timeStep
        << " to file '" << filename << "'";
    }

    hid_t fileId = Loci::hdf5CreateFile(filename.c_str(), H5F_ACC_TRUNC, H5P_DEFAULT, H5P_DEFAULT);
    Loci::writeContainer(fileId, "meanSquare", $meanSquare_X.Rep());
    Loci::writeContainer(fileId, "count", $meanSquareCount_X.Rep());
    Loci::hdf5CloseFile(fileId);
  }
};

$rule pointwise(
  meanSquare_X_icf
  <-
  meanSquareVariable_X, icDirectory, caseName
), constraint(geom_cells, withICDirectory),
parametric(meanSquare(X)), option(disable_threading), prelude {
  std::ostringstream ss;
  ss << *$icDirectory << "meanSquare_" << *$meanSquareVariable_X << "_" << *$caseName;

  std::string filename(ss.str());

  Loci::entitySet readSet = entitySet(seq);
  hid_t fileId = Loci::hdf5OpenFile(filename.c_str(), H5F_ACC_RDONLY, H5P_DEFAULT);
  Loci::readContainer(fileId, "meanSquare", $meanSquare_X_icf.Rep(), readSet);
  Loci::hdf5CloseFile(fileId);
};

$rule apply(meanSquare_X_ic <- meanSquare_X_icf)[Loci::Summation],
parametric(meanSquare(X)) {
  $meanSquare_X_ic = $meanSquare_X_icf;
}

$rule pointwise(meanSquare_X{n=0} <- meanSquare_X_ic),
parametric(meanSquare(X)) {
  $meanSquare_X{n=0} = $meanSquare_X_ic;
}

$rule pointwise(meanSquare_X{n,rk=0} <- meanSquare_X{n}),
constraint(calculateMeanSquare_X, meanSquare_X{n}),
inplace(meanSquare_X{n,rk=0}|meanSquare_X{n}),
parametric(meanSquare(X)), prelude {};

$rule pointwise(meanSquare(X){n,rk} <- meanSquare_X{n,rk}) {
  $meanSquare(X){n,rk} = $meanSquare_X{n,rk};
}

$rule pointwise(meanSquare_X{n,rk+1} <- meanSquare(X){n,rk}),
inplace(meanSquare_X{n,rk+1}|meanSquare(X){n,rk}),
parametric(meanSquare(X)), prelude {};

$type X store<double>;
$rule pointwise(
  meanSquare_X{n+1}
  <-
  meanSquare_X{n,rk}, X{n,rk}, meanFrequency{n,rk},
  meanSquareCount_X{n,rk}, timeStep{n,rk}
), conditional(rkFinished{n,rk}), parametric(meanSquare(X)) {
  if($timeStep{n,rk}%$meanFrequency{n,rk} == 0) {
    $meanSquare_X{n+1} = $X{n,rk}*$X{n,rk};
  } else {
    $meanSquare_X{n+1} = ($X{n,rk}*$X{n,rk} - $meanSquare_X{n,rk})/($meanSquareCount_X{n,rk}+1);
  }
}

// =============================================================================
// Time average of square of vector3d quantities
// =============================================================================

$rule unit(meanSquarev3d_X_ic),
constraint(geom_cells, calculateMeanSquare_X),
parametric(meanSquarev3d(X)) {
  $meanSquarev3d_X_ic = Loci::vector3d<double>(0.0, 0.0, 0.0);
}

$rule pointwise(
  OUTPUT
  <-
  meanSquarev3d_X, meanSquareCount_X, meanSquareVariable_X,
  timeStep, restartDirectory, caseName, $n
), conditional(doRestart), parametric(meanSquarev3d(X)),
option(disable_threading), prelude {
  if(*$timeStep != 0 && *$$n != 0) {
    std::ostringstream ss;
    ss << *$restartDirectory << "meanSquare_" << *$meanSquareVariable_X
      << "_" << *$caseName;

    std::string filename(ss.str());

    $[Once] {
      LOG(INFO) << "writing restart state for mean square of "
        << *$meanSquareVariable_X << " at time step " << *$timeStep
        << " to file '" << filename << "'";
    }

    hid_t fileId = Loci::hdf5CreateFile(filename.c_str(), H5F_ACC_TRUNC, H5P_DEFAULT, H5P_DEFAULT);
    Loci::writeContainer(fileId, "meanSquare", $meanSquarev3d_X.Rep());
    Loci::writeContainer(fileId, "count", $meanSquareCount_X.Rep());
    Loci::hdf5CloseFile(fileId);
  }
};

$rule pointwise(
  meanSquarev3d_X_icf
  <-
  meanSquareVariable_X, icDirectory, caseName
), constraint(geom_cells, withICDirectory),
parametric(meanSquarev3d(X)), option(disable_threading), prelude {
  std::ostringstream ss;
  ss << *$icDirectory << "meanSquare_" << *$meanSquareVariable_X << "_" << *$caseName;

  std::string filename(ss.str());

  Loci::entitySet readSet = entitySet(seq);
  hid_t fileId = Loci::hdf5OpenFile(filename.c_str(), H5F_ACC_RDONLY, H5P_DEFAULT);
  Loci::readContainer(fileId, "meanSquare", $meanSquarev3d_X_icf.Rep(), readSet);
  Loci::hdf5CloseFile(fileId);
};


$rule apply(meanSquarev3d_X_ic <- meanSquarev3d_X_icf)[Loci::Summation],
parametric(meanSquarev3d(X)) {
  $meanSquarev3d_X_ic = $meanSquarev3d_X_icf;
}

$rule pointwise(meanSquarev3d_X{n=0} <- meanSquarev3d_X_ic),
parametric(meanSquarev3d(X)) {
  $meanSquarev3d_X{n=0} = $meanSquarev3d_X_ic;
}

$rule pointwise(meanSquarev3d_X{n,rk=0} <- meanSquarev3d_X{n}),
constraint(calculateMeanSquare_X, meanSquarev3d_X{n}),
inplace(meanSquarev3d_X{n,rk=0}|meanSquarev3d_X{n}),
parametric(meanSquarev3d(X)), prelude {};

$rule pointwise(meanSquarev3d(X){n,rk} <- meanSquarev3d_X{n,rk}) {
  $meanSquarev3d(X){n,rk} = $meanSquarev3d_X{n,rk};
}

$rule pointwise(meanSquarev3d_X{n,rk+1} <- meanSquarev3d(X){n,rk}),
inplace(meanSquarev3d_X{n,rk+1}|meanSquarev3d(X){n,rk}),
parametric(meanSquarev3d(X)), prelude {};

$type X store<Loci::vector3d<double> >;
$rule pointwise(
  meanSquarev3d_X{n+1}
  <-
  meanSquarev3d_X{n,rk}, X{n,rk}, meanFrequency{n,rk},
  meanSquareCount_X{n,rk}, timeStep{n,rk}
), conditional(rkFinished{n,rk}), parametric(meanSquarev3d(X)) {
  Loci::vector3d<double> temp(
    $X{n,rk}.x*$X{n,rk}.x, $X{n,rk}.y*$X{n,rk}.y, $X{n,rk}.z*$X{n,rk}.z
  );
  if($timeStep{n,rk}%$meanFrequency{n,rk} == 0) {
    $meanSquarev3d_X{n+1} = temp;
  } else {
    $meanSquarev3d_X{n+1} = (temp - $meanSquarev3d_X{n,rk})/($meanSquareCount_X{n,rk}+1);
  }
}

} // end: namespace flame
