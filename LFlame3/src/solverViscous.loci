$include "FVM.lh"
$include "flame.lh"

#include <flame.hh>

namespace flame {

// =============================================================================
// Calculation of shear stress tensor and vector.
// =============================================================================

$rule pointwise(shearStress_f <- gradv3d_f(velocity), viscosity_f),
constraint(viscousFlow, area) {
  double mu = $viscosity_f;
  
  double dudx = $gradv3d_f(velocity).x.x;
  double dvdy = $gradv3d_f(velocity).y.y;
  double dwdz = $gradv3d_f(velocity).z.z;
  double dvdx = $gradv3d_f(velocity).y.x;
  double dwdx = $gradv3d_f(velocity).z.x;
  double dwdy = $gradv3d_f(velocity).z.y;
  double dudy = $gradv3d_f(velocity).x.y;
  double dudz = $gradv3d_f(velocity).x.z;
  double dvdz = $gradv3d_f(velocity).y.z;
  double divm = (dudx+dvdy+dwdz)*(1./3.);
  
  $shearStress_f.xx = 2.0*mu*(dudx-divm);
  $shearStress_f.yy = 2.0*mu*(dvdy-divm);
  $shearStress_f.zz = 2.0*mu*(dwdz-divm);
  
  $shearStress_f.xy = mu*(dudy+dvdx);
  $shearStress_f.xz = mu*(dudz+dwdx);
  $shearStress_f.yz = mu*(dvdz+dwdy);
}

$rule pointwise(shearForce_f <- shearStress_f, area),
  constraint(viscousFlow, area) {
  Loci::vector3d<double> const & an = $area.n;
  double const sada = $area.sada;
  SymmetricTensor const & tau = $shearStress_f;
  $shearForce_f = Loci::vector3d<double>(
    (tau.xx*an.x + tau.xy*an.y + tau.xz*an.z),
    (tau.xy*an.x + tau.yy*an.y + tau.yz*an.z),
    (tau.xz*an.x + tau.yz*an.y + tau.zz*an.z)
  )*sada;
}

// =============================================================================
// Calculation of viscous flux.
// =============================================================================

$rule pointwise(heat_f <- grads_f(temperature), conductivity_f, area),
constraint(viscousFlow, area) {
  Loci::vector3d<double> q = -$conductivity_f*$area.sada*$grads_f(temperature);
  $heat_f = dot(q, $area.n);
}

$rule pointwise(viscousFlux_f <- shearForce_f, velocity_f, heat_f),
  constraint(viscousFlow, area) {
  Loci::Array<double, 4> & Fv = $viscousFlux_f;
  Fv[0] = $shearForce_f.x;
  Fv[1] = $shearForce_f.y;
  Fv[2] = $shearForce_f.z;
  Fv[3] = dot($velocity_f, $shearForce_f) - $heat_f;
}

} // end: namespace flame
