$include "flame.lh"
$include "FVM.lh"

#include <Loci.h>

#define GLOG_USE_GLOG_EXPORT
#include <glog/logging.h>

//==============================================================================

$rule singleton(dtRK <- timeStepSize) {
  $dtRK = $timeStepSize;
}

$rule default(rkOrder) {
  $rkOrder = 2;
}

$rule singleton(rkOrderWeights <- rkOrder) {
  std::vector<Loci::Array<double, 3> > wlist;
  Loci::Array<double, 3> wts;
  wts[0] = 1.0; wts[1] = 0.0; wts[2] = 1.0;
  wlist.push_back(wts);
  
  if($rkOrder == 2) {
    wts[0] = 0.5; wts[1] = 0.5; wts[2] = 0.5;
    wlist.push_back(wts);
  }
  
  if($rkOrder == 3) {
    wts[0] = 0.75; wts[1] = 0.25; wts[2] = 0.25;
    wlist.push_back(wts);
    
    wts[0] = 1./3.; wts[1] = 2./3.; wts[2] = 2./3.;
    wlist.push_back(wts);
  }
  
  $rkOrderWeights = wlist;
  
  if($rkOrder < 1 || $rkOrder > 3) {
    LOG(ERROR) << "rkOrder should be between 1 and 3, it is set to "
      << $rkOrder;
    Loci::Abort();
  }
}

// =============================================================================
// Internal variables for RK iterations.
// =============================================================================

$type gagePressure_i store<double>;
$type velocity_i store<Loci::vector3d<double> >;
$type temperature_i store<double>;
$type speciesY_i storeVec<double>;
$type mixtureW_i store<double>;
$type mixtureR_i store<double>;
$type speciesX_i storeVec<double>;
$type speciesCp_i storeVec<double>;
$type speciesEnthalpy_i storeVec<double>;
$type mixtureCp_i store<double>;
$type mixtureEnthalpy_i store<double>;
$type ssQ_i store<Loci::Array<double, 5> >;
$type msQ_i storeVec<double>;

// =============================================================================
// RK loop initialization.
// =============================================================================

$rule singleton(timeStep{n,rk=0} <- timeStep{n}) {
  $timeStep{n,rk=0} = $timeStep{n};
}

$rule singleton(stime{n,rk=0} <- stime{n}) {
  $stime{n,rk=0} = $stime{n};
}

$rule pointwise(gagePressure_i{n,rk=0} <- gagePressure{n}) {
  $gagePressure_i{n,rk=0} = $gagePressure{n};
}

$rule pointwise(velocity_i{n,rk=0} <- velocity{n}) {
  $velocity_i{n,rk=0} = $velocity{n};
}

$rule pointwise(temperature_i{n,rk=0} <- temperature{n}) {
  $temperature_i{n,rk=0} = $temperature{n};
}

$rule pointwise(speciesY_i{n,rk=0} <- speciesY{n}, Ns),
prelude {
  $speciesY_i{n,rk=0}.setVecSize(*$Ns);
} {
  $speciesY_i{n,rk=0} = $speciesY{n};
}

$rule pointwise(mixtureW_i{n,rk=0} <- mixtureW{n}) {
  $mixtureW_i{n,rk=0} = $mixtureW{n};
}

$rule pointwise(mixtureR_i{n,rk=0} <- mixtureR{n}) {
  $mixtureR_i{n,rk=0} = $mixtureR{n};
}

$rule pointwise(speciesX_i{n,rk=0} <- speciesX{n}, Ns),
prelude {
  $speciesX_i{n,rk=0}.setVecSize(*$Ns);
} {
  $speciesX_i{n,rk=0} = $speciesX{n};
}

$rule pointwise(speciesCp_i{n,rk=0} <- speciesCp{n}, Ns),
prelude {
  $speciesCp_i{n,rk=0}.setVecSize(*$Ns);
} {
  $speciesCp_i{n,rk=0} = $speciesCp{n};
}

$rule pointwise(speciesEnthalpy_i{n,rk=0} <- speciesEnthalpy{n}, Ns),
prelude {
  $speciesEnthalpy_i{n,rk=0}.setVecSize(*$Ns);
} {
  $speciesEnthalpy_i{n,rk=0} = $speciesEnthalpy{n};
}

$rule pointwise(mixtureCp_i{n,rk=0} <- mixtureCp{n}) {
  $mixtureCp_i{n,rk=0} = $mixtureCp{n};
}

$rule pointwise(mixtureEnthalpy_i{n,rk=0} <- mixtureEnthalpy{n}) {
  $mixtureEnthalpy_i{n,rk=0} = $mixtureEnthalpy{n};
}

$rule pointwise(ssQ_i{n,rk=0} <- ssQ{n}, Ns) {
  $ssQ_i{n,rk=0} = $ssQ{n};
}

$rule pointwise(msQ_i{n,rk=0} <- msQ{n}, Ns),
prelude {
  $msQ_i{n,rk=0}.setVecSize(*$Ns+4);
} {
  $msQ_i{n,rk=0} = $msQ{n};
}

// =============================================================================

$rule pointwise(gagePressure{n,rk} <- gagePressure_i{n,rk}),
inplace(gagePressure{n,rk}|gagePressure_i{n,rk}), prelude {
};

$rule pointwise(velocity{n,rk} <- velocity_i{n,rk}),
inplace(velocity{n,rk}|velocity_i{n,rk}), prelude {
};

$rule pointwise(temperature{n,rk} <- temperature_i{n,rk}),
inplace(temperature{n,rk}|temperature_i{n,rk}), prelude {
};

$rule pointwise(speciesY{n,rk} <- speciesY_i{n,rk}),
inplace(speciesY{n,rk}|speciesY_i{n,rk}), prelude {
};

$rule pointwise(mixtureW{n,rk} <- mixtureW_i{n,rk}),
inplace(mixtureW{n,rk}|mixtureW_i{n,rk}), prelude {
};

$rule pointwise(mixtureR{n,rk} <- mixtureR_i{n,rk}),
inplace(mixtureR{n,rk}|mixtureR_i{n,rk}), prelude {
};

$rule pointwise(speciesX{n,rk} <- speciesX_i{n,rk}),
inplace(speciesX{n,rk}|speciesX_i{n,rk}), prelude {
};

$rule pointwise(speciesCp{n,rk} <- speciesCp_i{n,rk}),
inplace(speciesCp{n,rk}|speciesCp_i{n,rk}), prelude {
};

$rule pointwise(speciesEnthalpy{n,rk} <- speciesEnthalpy_i{n,rk}),
inplace(speciesEnthalpy{n,rk}|speciesEnthalpy_i{n,rk}), prelude {
};

$rule pointwise(mixtureCp{n,rk} <- mixtureCp_i{n,rk}),
inplace(mixtureCp{n,rk}|mixtureCp_i{n,rk}), prelude {
};

$rule pointwise(mixtureEnthalpy{n,rk} <- mixtureEnthalpy_i{n,rk}),
inplace(mixtureEnthalpy{n,rk}|mixtureEnthalpy_i{n,rk}), prelude {
};

$rule pointwise(ssQ{n,rk} <- ssQ_i{n,rk}),
inplace(ssQ{n,rk}|ssQ_i{n,rk}), prelude {
};

$rule pointwise(msQ{n,rk} <- msQ_i{n,rk}),
inplace(msQ{n,rk}|msQ_i{n,rk}), prelude {
};

// =============================================================================
// RK advance rules
// =============================================================================

$rule singleton(timeStep{n,rk+1} <- timeStep{n,rk}),
constraint(timeIntegrationRK) {
  $timeStep{n,rk+1} = $timeStep{n,rk};
}

$rule singleton(stime{n,rk+1} <- stime{n,rk}),
constraint(timeIntegrationRK) {
  $stime{n,rk+1} = $stime{n,rk};
}

// Advance the single-species conservative variables.
$rule pointwise(
  ssQ_i{n,rk+1}
  <-
  ssQ{n}, ssQ{n,rk}, ssResidual{n,rk},
  rkOrderWeights{n,rk}, $rk{n,rk}, dtRK{n,rk}, Ns
) {
  int const step = $$rk{n,rk};
  double const dt = $dtRK{n,rk};
  Loci::Array<double, 3> const & wgts = $rkOrderWeights{n,rk}[step];
  
  Loci::Array<double, 5> & Qrkp1 = $ssQ_i{n,rk+1};
  Loci::Array<double, 5> const & Qn = $ssQ{n};
  Loci::Array<double, 5> const & Qrk = $ssQ{n,rk};
  Loci::Array<double, 5> const & R = $ssResidual{n,rk};
  
  for(int i = 0; i < 5; ++i) {
    Qrkp1[i] = wgts[0]*Qn[i] + wgts[1]*Qrk[i] + wgts[2]*dt*R[i];
  }
}

// Advance the multi-species conservative variables.
$rule pointwise(
  msQ_i{n,rk+1}
  <-
  msQ{n}, msQ{n,rk}, msResidual{n,rk},
  rkOrderWeights{n,rk}, $rk{n,rk}, dtRK{n,rk}, Ns
), prelude {
  $msQ_i{n,rk+1}.setVecSize(*$Ns+4);
} {
  int const step = $$rk{n,rk};
  double const dt = $dtRK{n,rk};
  Loci::Array<double, 3> const & wgts = $rkOrderWeights{n,rk}[step];
  
  Vect<double> Qrkp1 = $msQ_i{n,rk+1};
  const_Vect<double> Qn = $msQ{n};
  const_Vect<double> Qrk = $msQ{n,rk};
  const_Vect<double> R = $msResidual{n,rk};
  
  for(int i = 0; i < $Ns+4; ++i) {
    Qrkp1[i] = wgts[0]*Qn[i] + wgts[1]*Qrk[i] + wgts[2]*dt*R[i];
  }
}

// =============================================================================
// Calculation of primitive variables from conservative variables at current
// RK iteration.
// =============================================================================

$rule pointwise(
  density_i{n,rk+1}, velocity_i{n,rk+1} <- ssQ_i{n,rk+1}, vol{n,rk},
  Pambient
), constraint(singleSpecies, geom_cells) {
  double const rvol = 1.0/$vol{n,rk};
  $density_i{n,rk+1} = ssQ_i{n,rk+1}[4]*rvol;
  $velocity_i{n,rk+1} = Loci::vector3d<double>(
    ssQ_i{n,rk+1}[0], ssQ_i{n,rk+1}[1], ssQ_i{n,rk+1}[2]
  )*rvol/$density_i{n,rk+1};
}

$rule pointwise(mixtureW_i{n,rk+1}, mixtureR_i{n,rk+1} <- speciesW, Runiv),
constraint(singleSpecies, geom_cells) {
  $mixtureW_i{n,rk+1} = $speciesW[0];
  $mixtureR_i{n,rk+1} = $Runiv/$speciesW[0];
}

$rule pointwise(
  mixtureEnthalpy_i{n,rk+1}, mixtureCp_i{n,rk+1},
  temperature_i{n,rk+1}, gagePressure_i{n,rk+1}
  <-
  speciesCp_Constant, ssQ_i{n,rk+1}, density_i{n,rk+1},
  velocity_i{n,rk+1}, mixtureW_i{n,rk+1}, mixtureR_i{n,rk+1},
  vol{n,rk}, Pambient
), constraint(singleSpecies, caloricallyPerfectGas, thermallyPerfectGas, geom_cells) {
  double const r = $density_i{n,rk+1};
  Loci::vector3d<double> const & u = $velocity_i{n,rk+1};
  double const e0 = ssQ_i{n,rk+1}[3]/(r*$vol{n,rk});
  double const Cp = $speciesCp_Constant[0];
  double const R = $mixtureR_i{n,rk+1};
  double const Cv = Cp - R;
  double const e = e0 - 0.5*dot(u, u);
  double const T = e/Cv;
  double const h = Cp*T;
  double const P = eos_TP_P_from_r_T_R(r, T, R);
  
  $mixtureEnthalpy_i{n,rk+1} = h;
  $mixtureCp_i{n,rk+1} = Cp;
  $temperature_i{n,rk+1} = T;
  $gagePressure_i{n,rk+1} = P - $Pambient;
}

// -----------------------------------------------------------------------------

$rule pointwise(
  density_i{n,rk+1}, velocity_i{n,rk+1}, speciesY_i{n,rk+1}
  <-
  msQ_i{n,rk+1}, vol{n,rk}, Pambient, Ns
), constraint(multiSpecies, geom_cells), prelude {
  $speciesY_i{n,rk+1}.setVecSize(*$Ns);
} {
  double const rvol = 1.0/$vol{n,rk};
  double const * Q = &$msQ_i{n,rk+1}[0];

  double & r = $density_i{n,rk+1};
  Loci::vector3d<double> & u = $velocity_i{n,rk+1};
  double * Y = &($speciesY_i{n,rk+1}[0]);

  r = Q[4]*rvol;
  double const rvolr = 1.0/($vol{n,rk}*r);
  u = Loci::vector3d<double>(Q[0], Q[1], Q[2])*rvolr;

  double sumY = 0.0;
  for(int i = 0; i < $Ns-1; ++i) {
    double const Yi = Q[i+5]*rvolr;
    Y[i] = Yi < 0.0 ? 0.0 : Yi;
    sumY += Y[i];
  }
  Y[$Ns-1] = sumY > 1.0 ? 0.0 : 1.0-sumY;
  sumY += Y[$Ns-1];
  double factorY = sumY > 1.0 ? 1.0/sumY : 1.0;

  for(int i = 0; i < $Ns; ++i) {
    Y[i] *= factorY;
  }
}

$rule pointwise(
  mixtureW_i{n,rk+1}, mixtureR_i{n,rk+1}, speciesX_i{n,rk+1}
  <-
  speciesY_i{m,rk+}, speciesW, Runiv, Ns
), constraint(multiSpecies, geom_cells), prelude {
  $speciesX_i{n,rk+1}.setVecSize(*$Ns);
} {
  $mixtureW_i{n,rk+1} = mixture_mW_from_Y_sW(
    $Ns, &$speciesY_i{n,rk+1}[0], &$speciesW[0]
  );
  $mixtureR_i{n,rk+1} = $Runiv/$mixtureW_i{n,rk+1};
  mixture_X_from_Y_sW_mW(
    $Ns, &$speciesX_i{n,rk+1}[0], &$speciesY_i{n,rk+1}[0],
    &$speciesW[0], $mixtureW_i{n,rk+1}
  );
}

$rule pointwise(
  speciesCp_i{n,rk+1}, speciesEnthalpy_i{n,rk+1},
  mixtureCp_i{n,rk+1}, mixtureEnthalpy_i{n,rk+1},
  temperature_i{n,rk+1}, gagePressure_i{n,rk+1}
  <-
  msQ_i{n,rk+1}, density_i{n,rk+1},
  velocity_i{n,rk+1}, speciesY_i{n,rk+1},
  mixtureW_i{n,rk+1}, mixtureR_i{n,rk+1},
  vol{n,rk}, speciesCp_Constant, Pambient, Ns
), constraint(multiSpecies, caloricallyPerfectGas, thermallyPerfectGas, geom_cells), prelude {
  $speciesEnthalpy_i{n,rk+1}.setVecSize(*$Ns);
  $speciesCp_i{n,rk+1}.setVecSize(*$Ns);
} {
  double const * Q = &$msQ_i{n,rk+1}[0];
  double const & r = $density_i{n,rk+1};
  Loci::vector3d<double> const & u = $velocity_i{n,rk+1};
  double const * Y = &$speciesY_i{n,rk+1}[0];
  double const & W = $mixtureW_i{n,rk+1};
  double const & R = $mixtureR_i{n,rk+1};
  double const & vol = $vol{n,rk};

  double * sCp = &$speciesCp_i{n,rk+1}[0];
  double * sh = &$speciesEnthalpy_i{n,rk+1}[0];
  double & Cp = $mixtureCp_i{n,rk+1};
  double & h = $mixtureEnthalpy_i{n,rk+1};
  double & T = $temperature_i{n,rk+1};
  double & P = $gagePressure_i{n,rk+1};

  for(int i = 0; i < $Ns; ++i) {
    sCp[i] = $speciesCp_Constant[i];
  }

  Cp = mixture_Cp_from_sCp_Y($Ns, sCp, Y);
  double const e0 = Q[3]/(r*vol);
  double const Cv = Cp - R;
  double const e = e0 - 0.5*dot(u,u);
  T = e/Cv;
  h = Cp*T;
  for(int i = 0; i < $Ns; ++i) {
    sh[i] = sCp[i]*T;
  }
  P = eos_TP_P_from_r_T_R(r, T, R) - $Pambient;
}

// =============================================================================
// RK loop collapse rules
// =============================================================================

$rule singleton(lastRK{n,rk} <- $rk{n,rk}, rkOrder) {
  $lastRK{n,rk} = $$rk{n,rk} == $rkOrder-1;
}

$rule singleton(rkFinished{n,rk} <- $rk{n,rk}, rkOrder),
constraint(timeIntegrationRK) {
  $rkFinished{n,rk} = $$rk{n,rk} >= $rkOrder;
}

$rule singleton(timeStep{n+1} <- timeStep{n,rk}),
constraint(timeIntegrationRK),
conditional(rkFinished{n,rk}) {
  $timeStep{n+1} = $timeStep{n,rk} + 1;
}

$rule singleton(stime{n+1} <- stime{n,rk}, dtRK),
constraint(timeIntegrationRK),
conditional(rkFinished{n,rk}) {
  $stime{n+1} = $stime{n,rk} + $dtRK;
}

$rule pointwise(gagePressure{n+1} <- gagePressure{n,rk}),
inplace(gagePressure{n+1}|gagePressure{n,rk}),
constraint(geom_cells, timeIntegrationRK),
  conditional(rkFinished{n,rk}), prelude {};

$rule pointwise(velocity{n+1} <- velocity{n,rk}),
inplace(velocity{n+1}|velocity{n,rk}),
constraint(geom_cells, timeIntegrationRK),
  conditional(rkFinished{n,rk}), prelude {};

$rule pointwise(temperature{n+1} <- temperature{n,rk}),
inplace(temperature{n+1}|temperature{n,rk}),
constraint(geom_cells, timeIntegrationRK),
  conditional(rkFinished{n,rk}), prelude {};

$rule pointwise(speciesY{n+1} <- speciesY{n,rk}, Ns),
inplace(speciesY{n+1}|speciesY{n,rk}),
constraint(geom_cells, timeIntegrationRK),
  conditional(rkFinished{n,rk}), prelude {};

$rule pointwise(mixtureW{n+1} <- mixtureW{n,rk}),
inplace(mixtureW{n+1}|mixtureW{n,rk}),
constraint(geom_cells, timeIntegrationRK),
  conditional(rkFinished{n,rk}), prelude {};

$rule pointwise(mixtureR{n+1} <- mixtureR{n,rk}),
inplace(mixtureR{n+1}|mixtureR{n,rk}),
constraint(geom_cells, timeIntegrationRK),
  conditional(rkFinished{n,rk}), prelude {};

$rule pointwise(speciesX{n+1} <- speciesX{n,rk}, Ns),
inplace(speciesX{n+1}|speciesX{n,rk}),
constraint(geom_cells, timeIntegrationRK),
  conditional(rkFinished{n,rk}), prelude {};

$rule pointwise(speciesCp{n+1} <- speciesCp{n,rk}, Ns),
inplace(speciesCp{n+1}|speciesCp{n,rk}),
constraint(geom_cells, timeIntegrationRK),
  consitional(rkFinished{n,rk}), prelude {};

$rule pointwise(speciesEnthalpy{n+1} <- speciesEnthalpy{n,rk}, Ns),
inplace(speciesEnthalpy{n+1}|speciesEnthalpy{n,rk}),
constraint(geom_cells, timeIntegrationRK),
  consitional(rkFinished{n,rk}), prelude {};

$rule pointwise(mixtureCp{n+1} <- mixtureCp{n,rk}),
inplace(mixtureCp{n+1}|mixtureCp{n,rk}),
constraint(geom_cells, timeIntegrationRK),
  conditional(rkFinished{n,rk}), prelude {};

$rule pointwise(mixtureEnthalpy{n+1} <- mixtureEnthalpy{n,rk}),
inplace(mixtureEnthalpy{n+1}|mixtureEnthalpy{n,rk}),
constraint(geom_cells, timeIntegrationRK),
  conditional(rkFinished{n,rk}), prelude {};

//==============================================================================

$rule pointwise(cfl <- cflpdt, dtRK) {
  $cfl = $cflpdt * $dtRK;
}

//==============================================================================

$rule pointwise(soundSpeed <- mixtureCp, mixtureR, temperature),
constraint(thermallyPerfectGas, temperature) {
  $soundSpeed = eos_TP_a_from_Cp_R_T($mixtureCp, $mixtureR, $temperature);
}

//==============================================================================
