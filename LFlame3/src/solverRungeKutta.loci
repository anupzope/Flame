$include "flame.lh"
$include "FVM.lh"

#include <Loci.h>

#include <glog/logging.h>

//==============================================================================

$rule singleton(dtRK <- timeStepSize) {
  $dtRK = $timeStepSize;
}

$rule default(rkOrder) {
  $rkOrder = 2;
}

$rule singleton(rkOrderWeights <- rkOrder) {
  std::vector<Loci::Array<double, 3> > wlist;
  Loci::Array<double, 3> wts;
  wts[0] = 1.0; wts[1] = 0.0; wts[2] = 1.0;
  wlist.push_back(wts);
  
  if($rkOrder == 2) {
    wts[0] = 0.5; wts[1] = 0.5; wts[2] = 0.5;
    wlist.push_back(wts);
  }
  
  if($rkOrder == 3) {
    wts[0] = 0.75; wts[1] = 0.25; wts[2] = 0.25;
    wlist.push_back(wts);
    
    wts[0] = 1./3.; wts[1] = 2./3.; wts[2] = 2./3.;
    wlist.push_back(wts);
  }
  
  $rkOrderWeights = wlist;
  
  if($rkOrder < 1 || $rkOrder > 3) {
    LOG(ERROR) << "rkOrder should be between 1 and 3, it is set to "
      << $rkOrder;
    Loci::Abort();
  }
}

// =============================================================================
// RK loop initialization
// =============================================================================

$rule singleton(timeStep{n,rk=0} <- timeStep{n}) {
  $timeStep{n,rk=0} = $timeStep{n};
}

$rule singleton(stime{n,rk=0} <- stime{n}) {
  $stime{n,rk=0} = $stime{n};
}

$type gagePressure_i store<double>;
$type velocity_i store<Loci::vector3d<double> >;
$type temperature_i store<double>;
$type speciesY_i storeVec<double>;
$type mixtureW_i store<double>;
$type mixtureR_i store<double>;
$type speciesX_i storeVec<double>;
$type mixtureCp_i store<double>;
$type ssQ store<Loci::Array<double, 5> >;
$type ssQ_i store<Loci::Array<double, 5> >;
$type msQ storeVec<double>;
$type msQ_i storeVec<double>;

$rule pointwise(gagePressure_i{n,rk=0} <- gagePressure{n}),
constraint(geom_cells) {
  $gagePressure_i{n,rk=0} = $gagePressure{n};
}

$rule pointwise(velocity_i{n,rk=0} <- velocity{n}),
constraint(geom_cells) {
  $velocity_i{n,rk=0} = $velocity{n};
}

$rule pointwise(temperature_i{n,rk=0} <- temperature{n}),
constraint(geom_cells) {
  $temperature_i{n,rk=0} = $temperature{n};
}

$rule pointwise(speciesY_i{n,rk=0} <- speciesY{n}, Ns),
constraint(geom_cells), prelude {
  $speciesY_i{n,rk=0}.setVecSize(*$Ns);
} {
  $speciesY_i{n,rk=0} = $speciesY{n};
}

$rule pointwise(mixtureW_i{n,rk=0} <- mixtureW{n}),
constraint(geom_cells) {
  $mixtureW_i{n,rk=0} = $mixtureW{n};
}

$rule pointwise(mixtureR_i{n,rk=0} <- mixtureR{n}),
constraint(geom_cells) {
  $mixtureR_i{n,rk=0} = $mixtureR{n};
}

$rule pointwise(speciesX_i{n,rk=0} <- speciesX{n}, Ns),
constraint(geom_cells), prelude {
  $speciesX_i{n,rk=0}.setVecSize(*$Ns);
} {
  $speciesX_i{n,rk=0} = $speciesX{n};
}

$rule pointwise(mixtureCp_i{n,rk=0} <- mixtureCp{n}),
constraint(geom_cells) {
  $mixtureCp_i{n,rk=0} = $mixtureCp{n};
}

$rule pointwise(ssQ_i{n,rk=0} <- ssQ{n}, Ns),
constraint(geom_cells) {
  $ssQ_i{n,rk=0} = $ssQ{n};
}

$rule pointwise(msQ_i{n,rk=0} <- msQ{n}, Ns),
constraint(geom_cells), prelude {
  $msQ_i{n,rk=0}.setVecSize(*$Ns);
} {
  $msQ_i{n,rk=0} = $msQ{n};
}

// =============================================================================

$rule pointwise(gagePressure{n,rk} <- gagePressure_i{n,rk}),
inplace(gagePressure{n,rk}|gagePressure_i{n,rk}), prelude {
};

$rule pointwise(velocity{n,rk} <- velocity_i{n,rk}),
inplace(velocity{n,rk}|velocity_i{n,rk}), prelude {
};

$rule pointwise(temperature{n,rk} <- temperature_i{n,rk}),
inplace(temperature{n,rk}|temperature_i{n,rk}), prelude {
};

$rule pointwise(speciesY{n,rk} <- speciesY_i{n,rk}),
inplace(speciesY{n,rk}|speciesY_i{n,rk}), prelude {
};

$rule pointwise(mixtureW{n,rk} <- mixtureW_i{n,rk}),
inplace(mixtureW{n,rk}|mixtureW_i{n,rk}), prelude {
};

$rule pointwise(mixtureR{n,rk} <- mixtureR_i{n,rk}),
inplace(mixtureR{n,rk}|mixtureR_i{n,rk}), prelude {
};

$rule pointwise(speciesX{n,rk} <- speciesX_i{n,rk}),
inplace(speciesX{n,rk}|speciesX_i{n,rk}), prelude {
};

$rule pointwise(mixtureCp{n,rk} <- mixtureCp_i{n,rk}),
inplace(mixtureCp{n,rk}|mixtureCp_i{n,rk}), prelude {
};

$rule pointwise(ssQ{n,rk} <- ssQ_i{n,rk}),
inplace(ssQ{n,rk}|ssQ_i{n,rk}), prelude {
};

$rule pointwise(msQ{n,rk} <- msQ_i{n,rk}),
inplace(msQ{n,rk}|msQ_i{n,rk}), prelude {
};

// =============================================================================
// Calculation of conservative variables at current time iteration.
// =============================================================================

$rule pointwise(
  msQ{n}
  <-
  gagePressure{n}, velocity{n}, temperature{n}, speciesY{n},
  mixtureW{n}, mixtureR{n}, mixtureCp{n}, vol{n}, Pambient, Ns
), constraint(multiSpecies, idealGas, caloricallyPerfectGas, geom_cells), prelude {
  $msQ{n}.setVecSize(*$Ns+4);
} {
  Vect<double> Q = $msQ{n};
  const_Vect<double> Y = $speciesY{n};
  
  double const P = $gagePressure{n}+$Pambient;
  double const rho = P/($mixtureR{n}*$temperature{n});
  double const Cv = $mixtureCp{n} - $mixtureR{n};
  double const re = rho*Cv*$temperature{n};
  double const re0 = re + 0.5*rho*dot($velocity{n}, $velocity{n});
  double const vol = $vol{n};
  
  double const r = vol*rho;
  Loci::vector3d<double> m = vol*rho*$velocity{n};
  double const e = vol*re0;
  
  Q[0] = m[0];
  Q[1] = m[1];
  Q[2] = m[2];
  Q[3] = e;
  Q[4] = r;
  for(int i = 0; i < $Ns-1; ++i) {
    Q[i+5] = Y[i]*r;
  }
}

$rule pointwise(
  ssQ{n}
  <-
  gagePressure{n}, velocity{n}, temperature{n}, vol{n},
  speciesW, speciesConstantCp, speciesR, Pambient
), constraint(singleSpecies, idealGas, caloricallyPerfectGas, geom_cells) {
  Loci::Array<double, 5> & Q = $ssQ{n};
  
  double const P = $gagePressure{n}+$Pambient;
  double const rho = P/($speciesR[0]*$temperature{n});
  double const Cv = $speciesConstantCp[0] - $speciesR[0];
  double const re = rho*Cv*$temperature{n};
  double const re0 = re + 0.5*rho*dot($velocity{n}, $velocity{n});
  double const vol = $vol{n};
  
  double const r = vol*rho;
  Loci::vector3d<double> m = vol*rho*$velocity{n};
  double const e = vol*re0;
  
  Q[0] = m[0];
  Q[1] = m[1];
  Q[2] = m[2];
  Q[3] = e;
  Q[4] = r;
}

// =============================================================================
// RK advance rules
// =============================================================================

$rule singleton(timeStep{n,rk+1} <- timeStep{n,rk}),
constraint(timeIntegrationRK) {
  $timeStep{n,rk+1} = $timeStep{n,rk};
}

$rule singleton(stime{n,rk+1} <- stime{n,rk}),
constraint(timeIntegrationRK) {
  $stime{n,rk+1} = $stime{n,rk};
}

// -----------------------------------------------------------------------------

$rule pointwise(
  ssQ_i{n,rk+1}
  <-
  ssQ{n}, ssQ{n,rk}, ssResidual{n,rk},
  rkOrderWeights{n,rk}, $rk{n,rk}, dtRK{n,rk}, Ns
) {
  int const step = $$rk{n,rk};
  double const dt = $dtRK{n,rk};
  Loci::Array<double, 3> const & wgts = $rkOrderWeights{n,rk}[step];
  
  Loci::Array<double, 5> & Qrkp1 = $ssQ_i{n,rk+1};
  Loci::Array<double, 5> const & Qn = $ssQ{n};
  Loci::Array<double, 5> const & Qrk = $ssQ{n,rk};
  Loci::Array<double, 5> const & R = $ssResidual{n,rk};
  
  for(int i = 0; i < 5; ++i) {
    Qrkp1[i] = wgts[0]*Qn[i] + wgts[1]*Qrk[i] + wgts[2]*dt*R[i];
  }
}

// -----------------------------------------------------------------------------

$rule pointwise(
  msQ_i{n,rk+1}
  <-
  msQ{n}, msQ{n,rk}, msResidual{n,rk},
  rkOrderWeights{n,rk}, $rk{n,rk}, dtRK{n,rk}, Ns
), prelude {
  $msQ_i{n,rk+1}.setVecSize(*$Ns+4);
} {
  int const step = $$rk{n,rk};
  double const dt = $dtRK{n,rk};
  Loci::Array<double, 3> const & wgts = $rkOrderWeights{n,rk}[step];
  
  Vect<double> Qrkp1 = $msQ_i{n,rk+1};
  const_Vect<double> Qn = $msQ{n};
  const_Vect<double> Qrk = $msQ{n,rk};
  const_Vect<double> R = $msResidual{n,rk};
  
  for(int i = 0; i < $Ns+4; ++i) {
    Qrkp1[i] = wgts[0]*Qn[i] + wgts[1]*Qrk[i] + wgts[2]*dt*R[i];
  }
}

// -----------------------------------------------------------------------------

//$rule pointwise(
//  gagePressure_i{n,rk+1}, velocity_i{n,rk+1}, temperature_i{n,rk+1}
//  <-
//  rkOrderWeights{n,rk}, $rk{n,rk}, dtRK{n,rk},
//  vol{n}, gagePressure{n}, velocity{n}, temperature{n},
//  vol{n,rk}, gagePressure{n,rk}, velocity{n,rk}, temperature{n,rk},
//  ssResidual{n,rk},
//  speciesConstantCp, speciesR, Pambient
//), constraint(singleSpecies, idealGas, caloricallyPerfectGas, geom_cells) {
//  
//  //double const gm1 = $speciesGamma[0] - 1.0;
//  //double const rgm1 = 1.0/gm1;
//  
//  double const Cv = $speciesConstantCp[0] - $speciesR[0];
//  
//  double const P_n = $gagePressure{n}+$Pambient;
//  double const rho_n = P_n/($speciesR[0]*$temperature{n});
//  double const re_n = rho_n*Cv*$temperature{n};
//  double const re0_n = re_n + 0.5*rho_n*dot($velocity{n}, $velocity{n});
//  double const vol_n = $vol{n};
//  
//  double const P_rk = $gagePressure{n,rk}+$Pambient;
//  double const rho_rk = P_rk/($speciesR[0]*$temperature{n,rk});
//  double const re_rk = rho_rk*Cv*$temperature{n,rk};
//  double const re0_rk = re_rk + 0.5*rho_rk*dot($velocity{n,rk}, $velocity{n,rk});
//  double const vol_rk = $vol{n,rk};
//  
//  double const rvol_rk = 1.0/vol_rk;
//  
//  int const step = $$rk{n,rk};
//  //double const vn = $vol{n};
//  //double const vnp1 = $vol{n,rk};
//  //double const rvnp1 = 1.0/vnp1;
//  
//  double const dt = $dtRK{n,rk};
//  
//  Loci::Array<double, 3> const & wgts = $rkOrderWeights{n,rk}[step];
//  
//  double const rho_rkp1 = (wgts[0]*vol_n*rho_n + wgts[1]*vol_rk*rho_rk + wgts[2]*dt*$ssResidual{n,rk}[0])*rvol_rk;
//  
//  Loci::vector3d<double> const u_rkp1 = (
//    wgts[0]*vol_n*rho_n*$velocity{n} + 
//    wgts[1]*vol_rk*rho_rk*$velocity{n,rk} +
//    wgts[2]*dt*Loci::vector3d<double>($ssResidual{n,rk}[1], $ssResidual{n,rk}[2], $ssResidual{n,rk}[3])
//  )*(rvol_rk/rho_rkp1);
//  
//  double const re0_rkp1 = (wgts[0]*vol_n*re0_n + wgts[1]*vol_rk*re0_rk + wgts[2]*dt*$ssResidual{n,rk}[4])*rvol_rk;
//  
//  double const T_rkp1 = (re0_rkp1 - 0.5*rho_rkp1*dot(u_rkp1,u_rkp1))/(rho_rkp1*Cv);
//  double const P_rkp1 = rho_rkp1*$speciesR[0]*T_rkp1;
//  double const pg_rkp1 = P_rkp1 - $Pambient;
//  
//  $gagePressure_i{n,rk+1} = pg_rkp1;
//  $velocity_i{n,rk+1} = u_rkp1;
//  $temperature_i{n,rk+1} = T_rkp1;
//}

// -----------------------------------------------------------------------------

//$rule pointwise(
//  gagePressure_i{n,rk+1}, velocity_i{n,rk+1}, temperature_i{n,rk+1},
//  speciesY_i{n,rk+1}, speciesX_i{n,rk+1}, mixtureW_i{n,rk+1},
//  mixtureR_i{n,rk+1}, mixtureCp_i{n,rk+1}
//  <-
//  rkOrderWeights{n,rk}, $rk{n,rk}, dtRK{n,rk},
//  vol{n}, gagePressure{n}, velocity{n}, temperature{n},
//  speciesY{n}, speciesX{n}, mixtureW{n}, mixtureR{n}, mixtureCp{n},
//  vol{n,rk}, gagePressure{n,rk}, velocity{n,rk}, temperature{n,rk},
//  speciesY{n,rk}, speciesX{n,rk}, mixtureW{n,rk}, mixtureR{n,rk}, mixtureCp{n,rk},
//  msResidual{n,rk},
//  speciesW, speciesConstantCp, speciesR, Pambient, Runiv, Ns
//), constraint(multiSpecies, idealGas, caloricallyPerfectGas, geom_cells), prelude {
//  $speciesY_i{n,rk+1}.setVecSize(*$Ns);
//  $speciesX_i{n,rk+1}.setVecSize(*$Ns);
//} {
//  const_Vect<double> Y_n = $speciesY{n};
//  const_Vect<double> Y_rk = $speciesY{n,rk};
//  
//  double const P_n = $gagePressure{n}+$Pambient;
//  double const rho_n = P_n/($mixtureR{n}*$temperature{n});
//  double const Cv_n = $mixtureCp{n} - $mixtureR{n};
//  double const re_n = rho_n*Cv_n*$temperature{n};
//  double const re0_n = re_n + 0.5*rho_n*dot($velocity{n}, $velocity{n});
//  double const vol_n = $vol{n};
//  
//  double const P_rk = $gagePressure{n,rk}+$Pambient;
//  double const rho_rk = P_rk/($mixtureR{n,rk}*$temperature{n,rk});
//  double const Cv_rk = $mixtureCp{n,rk} - $mixtureR{n,rk};
//  double const re_rk = rho_rk*Cv_rk*$temperature{n,rk};
//  double const re0_rk = re_rk + 0.5*rho_rk*dot($velocity{n,rk}, $velocity{n,rk});
//  double const vol_rk = $vol{n,rk};
//  
//  double const rvol_rk = 1.0/vol_rk;
//  
//  int const step = $$rk{n,rk};
//  
//  double const dt = $dtRK{n,rk};
//  
//  Loci::Array<double, 3> const & wgts = $rkOrderWeights{n,rk}[step];
//  
//  double const rho_rkp1 = (wgts[0]*vol_n*rho_n + wgts[1]*vol_rk*rho_rk + wgts[2]*dt*$msResidual{n,rk}[4])*rvol_rk;
//  
//  Loci::vector3d<double> const u_rkp1 = (
//    wgts[0]*vol_n*rho_n*$velocity{n} +
//    wgts[1]*vol_rk*rho_rk*$velocity{n,rk} +
//    wgts[2]*dt*Loci::vector3d<double>($msResidual{n,rk}[0], $msResidual{n,rk}[1], $msResidual{n,rk}[2])
//  )*(rvol_rk/rho_rkp1);
//  
//  double const re0_rkp1 = (wgts[0]*vol_n*re0_n + wgts[1]*vol_rk*re0_rk + wgts[2]*dt*$msResidual{n,rk}[3])*rvol_rk;
//  
//  double sumY = 0.0;
//  for(int i = 0; i < $Ns-1; ++i) {
//    $speciesY_i{n,rk+1}[i] = (
//      wgts[0]*vol_n*rho_n*$speciesY{n}[i] +
//      wgts[1]*vol_rk*rho_rk*$speciesY{n,rk}[i] +
//      wgts[2]*dt*$msResidual{n,rk}[5+i]
//    )*(rvol_rk/rho_rkp1);
//    sumY += $speciesY_i{n,rk+1}[i];
//  }
//  $speciesY_i{n,rk+1}[$Ns-1] = 1.0 - sumY;
//  
//  // calculate new mixture molecular weight
//  double W_rkp1 = 0.0;
//  for(int i = 0; i < $Ns; ++i) {
//    W_rkp1 += $speciesY_i{n,rk+1}[i]/$speciesW[i];
//  }
//  W_rkp1 = 1.0/W_rkp1;
//  
//  for(int i = 0; i < $Ns; ++i) {
//    $speciesX_i{n,rk+1}[i] = $speciesY_i{n,rk+1}[i]*W_rkp1/$speciesW[i];
//  }
//  
//  // calculate new gas constant of the mixture
//  double R_rkp1 = $Runiv/W_rkp1;
//  
//  // calculate new adiabatic index of the mixture
//  //double gamma_rkp1 = 0.0;
//  //for(int i = 0; i < $Ns; ++i) {
//  //  gamma_rkp1 += $speciesY_i{n,rk+1}[i]/($speciesGamma[i]-1.0);
//  //}
//  //gamma_rkp1 = 1.0/gamma_rkp1 + 1.0;
//  //
//  //double gammam1_rkp1 = gamma_rkp1 - 1.0;
//  
//  // calculate new mixture Cp
//  double Cp_rkp1 = 0.0;
//  for(int i = 0; i < $Ns; ++i) {
//    Cp_rkp1 += $speciesY_i{n,rk+1}[i]*$speciesConstantCp[i];
//  }
//  
//  double const Cv_rkp1 = Cp_rkp1 - R_rkp1;
//  
//  $mixtureW_i{n,rk+1} = W_rkp1;
//  $mixtureR_i{n,rk+1} = R_rkp1;
//  $mixtureCp_i{n,rk+1} = Cp_rkp1;
//  
//  double const T_rkp1 = (re0_rkp1 - 0.5*rho_rkp1*dot(u_rkp1, u_rkp1))/(rho_rkp1*Cv_rkp1);
//  double const P_rkp1 = rho_rkp1*R_rkp1*T_rkp1;
//  double const pg_rkp1 = P_rkp1 - $Pambient;
//  
//  $gagePressure_i{n,rk+1} = pg_rkp1;
//  $velocity_i{n,rk+1} = u_rkp1;
//  $temperature_i{n,rk+1} = T_rkp1;
//}

// =============================================================================
// Calculation of primitive variables from conservative variables at current
// RK iteration.
// =============================================================================

$rule pointwise(
  gagePressure_i{n,rk+1}, velocity_i{n,rk+1}, temperature_i{n,rk+1}
  <-
  ssQ_i{n,rk+1}, vol{n,rk},
  speciesConstantCp, speciesR, Pambient
), constraint(singleSpecies, idealGas, caloricallyPerfectGas, geom_cells) {
  double & pg = $gagePressure_i{n,rk+1};
  Loci::vector3d<double> & u = $velocity_i{n,rk+1};
  double & T = $temperature_i{n,rk+1};
  
  Loci::Array<double, 5> const & Q = $ssQ_i{n,rk+1};
  
  double const Cv = $speciesConstantCp[0] - $speciesR[0];
  double const rvol = 1.0/$vol{n,rk};
  
  double const rho = Q[4]*rvol;
  u = Loci::vector3d<double>(Q[0], Q[1], Q[2])*rvol/rho;
  double const re0 = Q[3]*rvol;
  
  T = (re0 - 0.5*rho*dot(u, u))/(rho*Cv);
  pg = rho*$speciesR[0]*T - $Pambient;
}

// -----------------------------------------------------------------------------

$rule pointwise(
  gagePressure_i{n,rk+1}, velocity_i{n,rk+1}, temperature_i{n,rk+1}, speciesY_i{n,rk+1},
  mixtureW_i{n,rk+1}, mixtureR_i{n,rk+1}, speciesX_i{n,rk+1}, mixtureCp_i{n,rk+1}
  <-
  msQ_i{n,rk+1}, vol{n,rk}, speciesW, speciesConstantCp, Runiv, Pambient, Ns
), constraint(multiSpecies, idealGas, caloricallyPerfectGas, geom_cells), prelude {
  $speciesY_i{n,rk+1}.setVecSize(*$Ns);
  $speciesX_i{n,rk+1}.setVecSize(*$Ns);
} {
  double & pg = $gagePressure_i{n,rk+1};
  Loci::vector3d<double> & u = $velocity_i{n,rk+1};
  double & T = $temperature_i{n,rk+1};
  Vect<double> Y = $speciesY_i{n,rk+1};
  double & W = $mixtureW_i{n,rk+1};
  double & R = $mixtureR_i{n,rk+1};
  Vect<double> X = $speciesX_i{n,rk+1};
  double & Cp = $mixtureCp_i{n,rk+1};
  
  const_Vect<double> Q = $msQ_i{n,rk+1};
  double const & vol = $vol{n,rk};
  double const rvol = 1.0/vol;
  
  double const rho = Q[4]*rvol;
  u = Loci::vector3d<double>(Q[0], Q[1], Q[2])*rvol/rho;
  double const re0 = Q[3]*rvol;
  
  double sumY = 0.0;
  for(int i = 0; i < $Ns-1; ++i) {
    double const Yi = Q[i+5]*rvol/rho;
    Y[i] = Yi;
    sumY += Yi;
  }
  Y[$Ns-1] = 1.0 - sumY;
  
  // calculate new mixture molecular weight
  W = 0.0;
  for(int i = 0; i < $Ns; ++i) {
    W += Y[i]/$speciesW[i];
  }
  W = 1.0/W;
  
  // calculate species molar fractions
  for(int i = 0; i < $Ns; ++i) {
    X[i] = Y[i]*W/$speciesW[i];
  }
  
  // calculate new gas constant of the mixture
  R = $Runiv/W;
  
  // calculate new mixture Cp
  Cp = 0.0;
  for(int i = 0; i < $Ns; ++i) {
    Cp += Y[i]*$speciesConstantCp[i];
  }
  
  double const Cv = Cp - R;
  
  T = (re0 - 0.5*rho*dot(u, u))/(rho*Cv);
  double const P = rho*R*T;
  pg = P - $Pambient;
  
  //$mixtureW_i{n,rk+1} = W;
  //$mixtureR_i{n,rk+1} = R;
  //$mixtureCp_i{n,rk+1} = Cp;
  
  //$gagePressure_i{n,rk+1} = pg;
  //$velocity_i{n,rk+1} = u;
  //$temperature_i{n,rk+1} = T;
}

// =============================================================================
// RK loop collapse rules
// =============================================================================

$rule singleton(lastRK{n,rk} <- $rk{n,rk}, rkOrder) {
  $lastRK{n,rk} = $$rk{n,rk} == $rkOrder-1;
}

$rule singleton(rkFinished{n,rk} <- $rk{n,rk}, rkOrder),
constraint(timeIntegrationRK) {
  $rkFinished{n,rk} = $$rk{n,rk} >= $rkOrder;
}

$rule singleton(timeStep{n+1} <- timeStep{n,rk}),
constraint(timeIntegrationRK),
conditional(rkFinished{n,rk}) {
  $timeStep{n+1} = $timeStep{n,rk} + 1;
}

$rule singleton(stime{n+1} <- stime{n,rk}, dtRK),
constraint(timeIntegrationRK),
conditional(rkFinished{n,rk}) {
  $stime{n+1} = $stime{n,rk} + $dtRK;
}

$rule pointwise(gagePressure{n+1} <- gagePressure_i{n,rk}),
inplace(gagePressure{n+1}|gagePressure_i{n,rk}),
constraint(geom_cells, timeIntegrationRK),
conditional(rkFinished{n,rk}) {
  $gagePressure{n+1} = $gagePressure_i{n,rk};
}

$rule pointwise(velocity{n+1} <- velocity_i{n,rk}),
inplace(velocity{n+1}|velocity_i{n,rk}),
constraint(geom_cells, timeIntegrationRK),
conditional(rkFinished{n,rk}) {
  $velocity{n+1} = $velocity_i{n,rk};
}

$rule pointwise(temperature{n+1} <- temperature_i{n,rk}),
inplace(temperature{n+1}|temperature_i{n,rk}),
constraint(geom_cells, timeIntegrationRK),
conditional(rkFinished{n,rk}) {
  $temperature{n+1} = $temperature_i{n,rk};
}

$rule pointwise(speciesY{n+1} <- speciesY_i{n,rk}, Ns),
inplace(speciesY{n+1}|speciesY_i{n,rk}),
constraint(geom_cells, multiSpecies, timeIntegrationRK),
conditional(rkFinished{n,rk}) {
  for(int i = 0; i < $Ns; ++i) {
    $speciesY{n+1} = $speciesY_i{n,rk};
  }
}

$rule pointwise(mixtureCp{n+1} <- mixtureCp_i{n,rk}),
inplace(mixtureCp{n+1}|mixtureCp_i{n,rk}),
constraint(geom_cells, timeIntegrationRK),
conditional(rkFinished{n,rk}) {
  $mixtureCp{n+1} = $mixtureCp_i{n,rk};
}

$rule pointwise(mixtureW{n+1} <- mixtureW_i{n,rk}),
inplace(mixtureW{n+1}|mixtureW_i{n,rk}),
constraint(geom_cells, timeIntegrationRK),
conditional(rkFinished{n,rk}) {
  $mixtureW{n+1} = $mixtureW_i{n,rk};
}

$rule pointwise(mixtureR{n+1} <- mixtureR_i{n,rk}),
inplace(mixtureR{n+1}|mixtureR_i{n,rk}),
constraint(geom_cells, timeIntegrationRK),
conditional(rkFinished{n,rk}) {
  $mixtureR{n+1} = $mixtureR_i{n,rk};
}

//==============================================================================

$rule pointwise(cfl <- cflpdt, dtRK) {
  $cfl = $cflpdt * $dtRK;
}

//==============================================================================
