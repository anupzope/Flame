$include "FVM.lh"
$include "flame.lh"

#include <Loci.h>

#include <flux.hh>
#include <flame.hh>

namespace flame {

// =============================================================================

$rule pointwise(
  ssConvectiveFlux_f <-
  leftv3d(velocity), leftsP(gagePressure,minPg), leftsP(temperature,Zero),
  rightv3d(velocity), rightsP(gagePressure,minPg), rightsP(temperature,Zero),
  area, Pambient, speciesConstantCp, speciesR
), constraint(singleSpecies, idealGas, caloricallyPerfectGas, (cl,cr)->(vol)) {
  AUSMPlusUpFluxIdealGas(
    $ssConvectiveFlux_f,
    $leftv3d(velocity), $leftsP(gagePressure,minPg), $leftsP(temperature,Zero),
    $rightv3d(velocity), $rightsP(gagePressure,minPg), $rightsP(temperature,Zero),
    $area.sada, $area.n, $Pambient,
    $speciesR[0], $speciesConstantCp[0], 1.0
  );
}

// =============================================================================

$rule pointwise(
  msConvectiveFlux_f <-
  leftsP(gagePressure,minPg), leftv3d(velocity), leftsP(temperature,Zero),
  leftvM(speciesY),
  rightsP(gagePressure,minPg), rightv3d(velocity), rightsP(temperature,Zero),
  rightvM(speciesY),
  (cl,cr)->(mixtureCp, mixtureR), area, Pambient, Ns
), constraint(multiSpecies, idealGas, caloricallyPerfectGas,
(cl,cr)->(gagePressure,velocity,temperature,speciesY)), prelude {
  $msConvectiveFlux_f.setVecSize(*$Ns+4);
} {
  double * flux = &($msConvectiveFlux_f[0]);
  
  double const * Yl = &($leftvM(speciesY)[0]);
  Loci::vector3d<double> const & Ul = $leftv3d(velocity);
  double const & Pgl = $leftsP(gagePressure,minPg);
  double const & Tl = $leftsP(temperature,Zero);
  double const & Cpl = $cl->$mixtureCp;
  double const & Rtildel = $cl->$mixtureR;
  
  double const * Yr = &($rightvM(speciesY)[0]);
  Loci::vector3d<double> const & Ur = $rightv3d(velocity);
  double const & Pgr = $rightsP(gagePressure,minPg);
  double const & Tr = $rightsP(temperature,Zero);
  double const & Cpr = $cr->$mixtureCp;
  double const & Rtilder = $cr->$mixtureR;
  
  AUSMPlusUpFluxMultiSpeciesIdealGas(
    flux,
    $Ns,
    Yl, Ul, Pgl, Tl, Rtildel, Cpl,
    Yr, Ur, Pgr, Tr, Rtilder, Cpr,
    $area.sada, $area.n, $Pambient,
    1.0
  );
}

// =============================================================================

$rule pointwise(strainRate, vorticity <- gradv3d(velocity)) {
  double const & dudx = $gradv3d(velocity).x.x;
  double const & dudy = $gradv3d(velocity).x.y;
  double const & dudz = $gradv3d(velocity).x.z;
  double const & dvdx = $gradv3d(velocity).y.x;
  double const & dvdy = $gradv3d(velocity).y.y;
  double const & dvdz = $gradv3d(velocity).y.z;
  double const & dwdx = $gradv3d(velocity).z.x;
  double const & dwdy = $gradv3d(velocity).z.y;
  double const & dwdz = $gradv3d(velocity).z.z;
  
  $strainRate.xx = dudx;
  $strainRate.xy = 0.5*(dudy+dvdx);
  $strainRate.xz = 0.5*(dudz+dwdx);
  $strainRate.yy = dvdy;
  $strainRate.yz = 0.5*(dvdz+dwdy);
  $strainRate.zz = dwdz;
  
  $vorticity.x = dwdy-dvdz;
  $vorticity.y = dudz-dwdx;
  $vorticity.z = dvdx-dudy;
}

$rule pointwise(
  strainRateMagnitude, vorticityMagnitude <- strainRate, vorticity
) {
  $strainRateMagnitude = sqrt(
    $strainRate.xx*$strainRate.xx +
    2.0*$strainRate.xy*$strainRate.xy +
    2.0*$strainRate.xz*$strainRate.xz +
    $strainRate.yy*$strainRate.yy +
    2.0*$strainRate.yz*$strainRate.yz +
    $strainRate.zz*$strainRate.zz
  );
  
  $vorticityMagnitude = norm($vorticity);
}

$rule pointwise(Qcriterion <- strainRateMagnitude, vorticityMagnitude) {
  $Qcriterion = 0.25*(
    $vorticityMagnitude*$vorticityMagnitude -
    2.0*$strainRateMagnitude*$strainRateMagnitude
  );
}

// =============================================================================

} // end: namespace flame