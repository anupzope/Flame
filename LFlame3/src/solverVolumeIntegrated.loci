#include <flame.hh>
#include <plot.hh>

$include "FVM.lh"
$include "flame.lh"

namespace flame {

$rule unit(totalVolume), constraint(geom_cells) {
  $totalVolume = 0.0;
}

$rule apply(totalVolume <- vol)[Loci::Summation] {
  join($totalVolume, $vol);
}

// =============================================================================

$rule unit(totalKineticEnergy), constraint(geom_cells) {
  $totalKineticEnergy = 0.0;
}

$rule apply(totalKineticEnergy <- vol, velocity, density)[Loci::Summation] {
  double const cellKE = 0.5*$density*dot($velocity,$velocity)*$vol;
  join($totalKineticEnergy, cellKE);
}

$rule apply(printParameterDBIdx <- totalKineticEnergy)[Loci::NullOp],
conditional(doPrint), option(disable_threading), prelude {
  printParameterDB.add(Loci::MPI_rank, "totalKineticEnergy", *$totalKineticEnergy);
  *$printParameterDBIdx += 1;
};

// =============================================================================

$rule unit(totalEnstrophy), constraint(geom_cells) {
  $totalEnstrophy = 0.0;
}

$rule apply(totalEnstrophy <- vol, vorticityMagnitude)[Loci::Summation] {
  double const cellEnstropy = $vorticityMagnitude*$vorticityMagnitude*$vol;
  join($totalEnstrophy, cellEnstropy);
}

$rule apply(printParameterDBIdx <- totalEnstrophy)[Loci::NullOp],
conditional(doPrint), option(disable_threading), prelude {
  printParameterDB.add(Loci::MPI_rank, "totalEnstrophy", *$totalEnstrophy);
  *$printParameterDBIdx += 1;
};

} // end: namespace flame