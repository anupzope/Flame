$include "FVM.lh"
$include "flame.lh"

#include <flame.hh>
#include <boundary_checker.hh>
#include <eos.hh>

namespace flame {

// =============================================================================

class ViscousWallBCChecker : public BoundaryChecker {
  std::string err;
  
public:
  std::string boundaryConditions() override {
    return "viscousWall";
  }
  
  std::string variablesChecked() override {
    return "adiabatic,heatFlux,temperature";
  }
  
  bool checkOptions(options_list const & ol) override {
    std::ostringstream errmsg;
    
    int error = 0;
    int count = 0;
    
    if(ol.optionExists("adiabatic")) {
      ++count;
    }
    
    if(ol.optionExists("heatFlux")) {
      ++count;
      Loci::option_value_type type = ol.getOptionValueType("heatFlux");
      if(type == Loci::UNIT_VALUE) {
        Loci::UNIT_type ut;
        ol.getOption("heatFlux", ut);
        if(!ut.is_compatible("W/m/m")) {
          errmsg << "[heatFlux unit must be compatible with W/m/m]";
          ++error;
        }
      } else if(type == Loci::REAL) { 
        // do nothing
      } else {
        errmsg << "[heatFlux must be of type REAL or UNIT_VALUE]";
        ++error;
      }
    }
    
    if(ol.optionExists("temperature")) {
      ++count;
      Loci::option_value_type type = ol.getOptionValueType("temperature");
      if(type == Loci::UNIT_VALUE) {
        Loci::UNIT_type ut;
        ol.getOption("temperature", ut);
        if(!ut.is_compatible("K")) {
          errmsg << "[unit of temperature must be compatible with K]";
          ++error;
        }
      } else if(type == Loci::REAL) { 
        // do nothing
      } else {
        errmsg << "[temperature must be of type REAL or UNIT_VALUE]";
        ++error;
      }
    }
    
    if(count != 1) {
      errmsg << "[must have one of adiabatic, heatFlux, or temperature option]";
      ++error;
    }
    
    if(error) {
      err = errmsg.str();
    }
    
    return error == 0;
  }
  
  std::ostream & errorMessage(std::ostream & s) override {
    s << err;
    return s;
  }
};

registerBoundaryChecker<ViscousWallBCChecker> viscousWallBCChecker;

// =============================================================================

$rule pointwise(AllViscousBCs),constraint(viscousWall_BC) {}

// =============================================================================

$rule pointwise(viscousWallHeatFluxFaces), constraint(ref->adiabatic_BCoption) {
}

$rule pointwise(viscousWallHeatFluxFaces), constraint(ref->heatFlux_BCoption) {
}

// =============================================================================

$rule pointwise(viscousWallHeat_f),
constraint(viscousWall_BC, ref->adiabatic_BCoption) {
  $viscousWallHeat_f = 0.0;
}

$rule pointwise(viscousWallHeat_f <- ref->heatFlux_BC, area),
constraint(viscousWall_BC, ref->heatFlux_BCoption) {
  $viscousWallHeat_f = $ref->$heatFlux_BC*$area.sada;
}

// =============================================================================

$rule pointwise(viscousWall::heat_f <- viscousWallHeat_f),
constraint(viscousFlow, viscousWall_BC, viscousWallHeatFluxFaces) {
  $heat_f = $viscousWallHeat_f;
}

// =============================================================================

$rule pointwise(viscousWallTemperature_f <- ref->temperature_BC),
constraint(viscousWall_BC, ref->temperature_BCoption) {
  $viscousWallTemperature_f = $ref->$temperature_BC;
}

$rule pointwise(
  viscousWallTemperature_f
  <-
  ci->(conductivity,temperature,cellcenter),
  area, facecenter, viscousWallHeat_f
), constraint(viscousWall_BC, viscousWallHeatFluxFaces) {
  double const dx = dot($facecenter-$ci->$cellcenter, $area.n);
  $viscousWallTemperature_f =
    -$viscousWallHeat_f*dx/($ci->$conductivity*$area.sada) + $ci->$temperature;
}

// =============================================================================

$rule pointwise(gagePressure_f <- ci->gagePressure),
constraint(viscousWall_BC) {
  $gagePressure_f = $ci->$gagePressure;
}

$rule pointwise(velocity_f),
constraint(viscousWall_BC) {
  $velocity_f = Loci::vector3d<double>(0.0, 0.0, 0.0);
}

$rule pointwise(temperature_f <- viscousWallTemperature_f),
constraint(viscousWall_BC) {
  $temperature_f = $viscousWallTemperature_f;
}

$rule pointwise(speciesY_f <- ci->speciesY, Ns),
constraint(viscousWall_BC), prelude {
  $speciesY_f.setVecSize(*$Ns);
} {
  $speciesY_f = $ci->$speciesY;
}

$rule pointwise(speciesX_f <- ci->speciesX, Ns),
constraint(viscousWall_BC), prelude {
  $speciesX_f.setVecSize(*$Ns);
} {
  $speciesX_f = $ci->$speciesX;
}

$rule pointwise(mixtureW_f, mixtureR_f <- ci->(mixtureW, mixtureR)),
constraint(viscousWall_BC) {
  $mixtureW_f = $ci->$mixtureW;
  $mixtureR_f = $ci->$mixtureR;
}

$rule pointwise(
  mixtureCp_f, mixtureEnthalpy_f <- temperature_f, speciesCp_Constant
), constraint(singleSpecies, caloricallyPerfectGas, viscousWall_BC) {
  $mixtureCp_f = $speciesCp_Constant[0];
  $mixtureEnthalpy_f = $speciesCp_Constant[0]*$temperature_f;
}

$rule pointwise(
  speciesCp_f, speciesEnthalpy_f <- temperature_f, speciesCp_Constant, Ns
), constraint(multiSpecies, caloricallyPerfectGas, viscousWall_BC), prelude {
  $speciesCp_f.setVecSize(*$Ns);
  $speciesEnthalpy_f.setVecSize(*$Ns);
} {
  for(int i = 0; i < $Ns; ++i) {
    $speciesCp_f[i] = $speciesCp_Constant[i];
    $speciesEnthalpy_f[i] = $speciesCp_Constant[i]*$temperature_f;
  }
}

$rule pointwise(
  mixtureCp_f, mixtureEnthalpy_f
  <-
  speciesCp_f, speciesEnthalpy_f, speciesY_f, Ns
), constraint(multiSpecies, caloricallyPerfectGas, viscousWall_BC) {
  $mixtureCp_f = mixture_Cp_from_sCp_Y(
    $Ns, &$speciesCp_f[0], &$speciesY_f[0]
  );
  $mixtureEnthalpy_f = mixture_H_from_sH_Y(
    $Ns, &$speciesCp_f[0], &$speciesEnthalpy_f[0]
  );
}

$rule pointwise(soundSpeed_f <- mixtureCp_f, mixtureR_f, temperature_f),
constraint(thermallyPerfectGas, viscousWall_BC) {
  $soundSpeed_f = eos_TP_a_from_Cp_R_T($mixtureCp_f, $mixtureR_f, $temperature_f);
}

// =============================================================================

$rule pointwise(ssConvectiveFlux_f <- area, gagePressure_f),
constraint(singleSpecies, viscousWall_BC) {
  double const pg = $gagePressure_f;
  Loci::vector3d<double> const n = $area.n*$area.sada;
  
  $ssConvectiveFlux_f[0] = pg*n.x;
  $ssConvectiveFlux_f[1] = pg*n.y;
  $ssConvectiveFlux_f[2] = pg*n.z;
  $ssConvectiveFlux_f[3] = 0.0;
  $ssConvectiveFlux_f[4] = 0.0;
}

$rule pointwise(msConvectiveFlux_f <- area, gagePressure_f, Ns),
constraint(multiSpecies, viscousWall_BC), prelude {
  $msConvectiveFlux_f.setVecSize(*$Ns+4);
} {
  double const pg = $gagePressure_f;
  Loci::vector3d<double> const n = $area.n*$area.sada;
  
  $msConvectiveFlux_f[0] = pg*n.x;
  $msConvectiveFlux_f[1] = pg*n.y;
  $msConvectiveFlux_f[2] = pg*n.z;
  $msConvectiveFlux_f[3] = 0.0;
  $msConvectiveFlux_f[4] = 0.0;
  for(int i = 0; i < $Ns-1; ++i) {
    $msConvectiveFlux_f[i+5] = 0.0;
  }
}

$rule pointwise(msDiffusiveFlux_f <- Ns),
constraint(viscousWall_BC), prelude {
  $msDiffusiveFlux_f.setVecSize(*$Ns);
} {
  for(int i = 0; i < $Ns; ++i) {
    $msDiffusiveFlux_f[i] = 0.0;
  }
}

// =============================================================================

$rule pointwise(
  yplus_f <- viscosity_f, density_f, facecenter, shearStress_f, area,
  ci->cellcenter
), constraint(AllViscousBCs) {
  SymmetricTensor const & tau = $shearStress_f;
  Loci::vector3d<double> const & an = $area.n;
  Loci::vector3d<double> const wallStress(
    (tau.xx*an.x + tau.xy*an.y + tau.xz*an.z),
    (tau.xy*an.x + tau.yy*an.y + tau.yz*an.z),
    (tau.xz*an.x + tau.yz*an.y + tau.zz*an.z)
  );
  double const dist_w = dot($facecenter-$ci->$cellcenter, $area.n);
  double const rho_w = $density_f;
  double const mu_w = $viscosity_f;
  double const tau_w = sqrt(dot(wallStress, wallStress));
  $yplus_f = sqrt(rho_w*tau_w)*dist_w/mu_w;
}

// =============================================================================

} // end: namespace flame
