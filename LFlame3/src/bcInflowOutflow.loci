$include "flame.lh"
$include "FVM.lh"

#include <flux.hh>
#include <flame.hh>
#include <utils.hh>
#include <boundary_checker.hh>
#include <eos.hh>

namespace flame {

// =============================================================================

class SupersonicOutflowBCChecker : public BoundaryChecker {
public:
  std::string boundaryConditions() override {
    return "supersonicOutflow";
  }
  
  std::string variablesChecked() override {
    return "";
  }
  
  bool checkOptions(options_list const & bcOptions) override {
    return true;
  }
  
  std::ostream & errorMessage(std::ostream & s) override {
    return s;
  }
};

registerBoundaryChecker<SupersonicOutflowBCChecker> supersonicOutflowBCChecker;

// =============================================================================

class InflowBCChecker : public BoundaryChecker {
  std::string message;
  
public:
  std::string boundaryConditions() override {
    return "supersonicInflow,farfield";
  }
  
  std::string variablesChecked() override {
    return "pressure,temperature,density,velocity,Mach,massFractions,molarFractions";
  }
  
  bool checkOptions(options_list const & bcOptions) override {
    int error = 0;
    std::stringstream errmsg;
    
    int thermoCount = 0;
    int speedCount = 0;
    int speciesCount = 0;
    
    std::string pName = "pressure", tName = "temperature", rName = "density";
    std::string vName = "velocity", mName = "Mach";
    std::string yName = "massFractions", xName = "molarFractions";
    
    if(bcOptions.optionExists(pName)) {
      ++thermoCount;
    }
    
    if(bcOptions.optionExists(tName)) {
      ++thermoCount;
    }
    
    if(bcOptions.optionExists(rName)) {
      ++thermoCount;
    }
    
    if(bcOptions.optionExists(vName)) {
      ++speedCount;
    }
    
    if(bcOptions.optionExists(mName)) {
      ++speedCount;
    }
    
    if(bcOptions.optionExists(yName)) {
      ++speciesCount;
    }
    
    if(bcOptions.optionExists(xName)) {
      ++speciesCount;
    }
    
    if(thermoCount != 2 && speedCount != 1 && speciesCount != 1) {
      errmsg << "[only two of the thermodynamic variables:"
        << pName << "," << tName << "," << rName << ", "
        << "one of the speed variables:" << vName << "," << mName << ", "
        << "and one of the species fractions variables:" << yName << "," << xName
        << " is required]";
      ++error;
    }
    
    message = (error ? errmsg.str() : "");
    
    return error == 0;
  }
  
  std::ostream & errorMessage(std::ostream & s) override {
    s << message;
    return s;
  }
};

registerBoundaryChecker<InflowBCChecker> inflowBCChecker;

// =============================================================================
// Supersonic inflow implementation.
// -----------------------------------------------------------------------------

$rule pointwise(gagePressure_f <- gagePressureRef),
constraint(supersonicInflow_BC) {
  $gagePressure_f = $gagePressureRef;
}

$rule pointwise(density_f <- densityRef),
constraint(supersonicInflow_BC) {
  $density_f = $densityRef;
}


$rule pointwise(temperature_f <- temperatureRef),
constraint(supersonicInflow_BC) {
  $temperature_f = $temperatureRef;
}

$rule pointwise(velocity_f <- velocityRef),
constraint(supersonicInflow_BC) {
  $velocity_f = $velocityRef;
}

$rule pointwise(speciesY_f <- speciesYRef, Ns),
constraint(supersonicInflow_BC), prelude {
  $speciesY_f.setVecSize(*$Ns);
} {
  $speciesY_f = $speciesYRef;
}

$rule pointwise(speciesX_f <- speciesXRef, Ns),
constraint(supersonicInflow_BC), prelude {
  $speciesX_f.setVecSize(*$Ns);
} {
  $speciesX_f = $speciesXRef;
}

$rule pointwise(mixtureW_f, mixtureR_f <- mixtureWRef, mixtureRRef),
constraint(supersonicInflow_BC) {
  $mixtureW_f = $mixtureWRef;
  $mixtureR_f = $mixtureRRef;
}

$rule pointwise(mixtureCp_f <- mixtureCpRef),
constraint(supersonicInflow_BC) {
  $mixtureCp_f = $mixtureCpRef;
}

$rule pointwise(mixtureEnthalpy_f <- mixtureEnthalpyRef),
constraint(supersonicInflow_BC) {
  $mixtureEnthalpy_f = $mixtureEnthalpyRef;
}

$rule pointwise(speciesCp_f <- speciesCpRef, Ns),
constraint(supersonicInflow_BC), prelude {
  $speciesCp_f.setVecSize(*$Ns);
} {
  $speciesCp_f = $speciesCpRef;
}

$rule pointwise(speciesEnthalpy_f <- speciesEnthalpyRef, Ns),
constraint(supersonicInflow_BC), prelude {
  $speciesEnthalpy_f.setVecSize(*$Ns);
} {
  $speciesEnthalpy_f = $speciesEnthalpyRef;
}

$rule pointwise(soundSpeed_f <- soundSpeedRef),
constraint(supersonicInflow_BC) {
  $soundSpeed_f = $soundSpeedRef;
}

$rule pointwise(
  ssConvectiveFlux_f
  <-
  leftsP(gagePressure,minPg), leftsP(temperature,Zero), leftv3d(velocity),
  gagePressure_f, temperature_f, velocity_f,
  area, Pambient, speciesCp_Constant, speciesR
), constraint(singleSpecies, thermallyPerfectGas, supersonicInflow_BC) {
  AUSMPlusUpFluxIdealGas(
    $ssConvectiveFlux_f,
    $leftv3d(velocity), $leftsP(gagePressure,minPg), $leftsP(temperature,Zero),
    $velocity_f, $gagePressure_f, $temperature_f,
    $area.sada, $area.n, $Pambient,
    $speciesR[0], $speciesCp_Constant[0], 1.0
  );
}

$rule pointwise(
  msConvectiveFlux_f
  <-
  leftsP(gagePressure,minPg), leftsP(temperature,Zero), leftv3d(velocity),
  leftvM(speciesY), ci->(mixtureCp,mixtureR),
  gagePressure_f, temperature_f, velocity_f, speciesY_f,
  mixtureCp_f, mixtureR_f,
  area, Pambient, Ns
), constraint(multiSpecies, thermallyPerfectGas, supersonicInflow_BC), prelude {
  $msConvectiveFlux_f.setVecSize(*$Ns+4);
} {
  double * flux = &($msConvectiveFlux_f[0]);

  double const * Yl = &($leftvM(speciesY)[0]);
  Loci::vector3d<double> const & Ul = $leftv3d(velocity);
  double const & Pgl = $leftsP(gagePressure,minPg);
  double const & Tl = $leftsP(temperature,Zero);
  double const & Cpl = $ci->$mixtureCp;
  double const & Rtildel = $ci->$mixtureR;

  double const * Yr = &($speciesY_f[0]);
  Loci::vector3d<double> const & Ur = $velocity_f;
  double const & Pgr = $gagePressure_f;
  double const & Tr = $temperature_f;
  double const & Cpr = $mixtureCp_f;
  double const & Rtilder = $mixtureR_f;

  AUSMPlusUpFluxMultiSpeciesIdealGas(
    flux,
    $Ns,
    Yl, Ul, Pgl, Tl, Rtildel, Cpl,
    Yr, Ur, Pgr, Tr, Rtilder, Cpr,
    $area.sada, $area.n, $Pambient,
    1.0
  );
}

// =============================================================================
// Supersonic outflow implementation
// -----------------------------------------------------------------------------

$rule pointwise(gagePressure_f <- ci->gagePressure),
constraint(supersonicOutflow_BC) {
  $gagePressure_f = $ci->$gagePressure;
}

$rule pointwise(density_f <- ci->density),
constraint(supersonicOutflow_BC) {
  $density_f = $ci->$density;
}

$rule pointwise(temperature_f <- ci->temperature),
constraint(supersonicOutflow_BC) {
  $temperature_f = $ci->$temperature;
}

$rule pointwise(velocity_f <- ci->velocity),
constraint(supersonicOutflow_BC) {
  $velocity_f = $ci->$velocity;
}

$rule pointwise(speciesY_f <- ci->speciesY, Ns),
constraint(supersonicOutflow_BC), prelude {
  $speciesY_f.setVecSize(*$Ns);
} {
  $speciesY_f = $ci->$speciesY;
}

$rule pointwise(speciesX_f <- ci->speciesX, Ns),
constraint(supersonicOutflow_BC), prelude {
  $speciesX_f.setVecSize(*$Ns);
} {
  $speciesX_f = $ci->$speciesX;
}

$rule pointwise(mixtureW_f, mixtureR_f <- ci->(mixtureW,mixtureR)),
constraint(supersonicOutflow_BC) {
  $mixtureW_f = $ci->$mixtureW;
  $mixtureR_f = $ci->$mixtureR;
}

$rule pointwise(mixtureCp_f <- ci->mixtureCp),
constraint(supersonicOutflow_BC) {
  $mixtureCp_f = $ci->$mixtureCp;
}

$rule pointwise(mixtureEnthalpy_f <- ci->mixtureEnthalpy),
constraint(supersonicOutflow_BC) {
  $mixtureEnthalpy_f = $ci->$mixtureEnthalpy;
}

$rule pointwise(speciesCp_f <- ci->speciesCp, Ns),
constraint(supersonicOutflow_BC), prelude {
  $speciesCp_f.setVecSize(*$Ns);
} {
  $speciesCp_f = $ci->$speciesCp;
}

$rule pointwise(speciesEnthalpy_f <- ci->speciesEnthalpy, Ns),
constraint(supersonicOutflow_BC),
prelude {
  $speciesEnthalpy_f.setVecSize(*$Ns);
} {
  $speciesEnthalpy_f = $ci->$speciesEnthalpy;
}

$rule pointwise(soundSpeed_f <- ci->soundSpeed),
constraint(supersonicOutflow_BC) {
  $soundSpeed_f = $ci->$soundSpeed;
}

$rule pointwise(
  ssConvectiveFlux_f
  <-
  leftsP(gagePressure,minPg), leftsP(temperature,Zero), leftv3d(velocity),
  gagePressure_f, temperature_f, velocity_f,
  area, Pambient, speciesCp_Constant, speciesR
), constraint(singleSpecies, thermallyPerfectGas, supersonicOutflow_BC) {
  AUSMPlusUpFluxIdealGas(
    $ssConvectiveFlux_f,
    $leftv3d(velocity), $leftsP(gagePressure,minPg), $leftsP(temperature,Zero),
    $velocity_f, $gagePressure_f, $temperature_f,
    $area.sada, $area.n, $Pambient,
    $speciesR[0], $speciesCp_Constant[0], 1.0
  );
}

$rule pointwise(
  msConvectiveFlux_f
  <-
  leftsP(gagePressure,minPg), leftsP(temperature,Zero), leftv3d(velocity),
  leftvM(speciesY), ci->(mixtureCp,mixtureR),
  gagePressure_f, temperature_f, velocity_f, speciesY_f,
  mixtureCp_f, mixtureR_f,
  area, Pambient, Ns
), constraint(multiSpecies, thermallyPerfectGas, supersonicOutflow_BC), prelude {
  $msConvectiveFlux_f.setVecSize(*$Ns+4);
} {
  double * flux = &($msConvectiveFlux_f[0]);

  double const * Yl = &($leftvM(speciesY)[0]);
  Loci::vector3d<double> const & Ul = $leftv3d(velocity);
  double const & Pgl = $leftsP(gagePressure,minPg);
  double const & Tl = $leftsP(temperature,Zero);
  double const & Cpl = $ci->$mixtureCp;
  double const & Rtildel = $ci->$mixtureR;

  double const * Yr = &($speciesY_f[0]);
  Loci::vector3d<double> const & Ur = $velocity_f;
  double const & Pgr = $gagePressure_f;
  double const & Tr = $temperature_f;
  double const & Cpr = $mixtureCp_f;
  double const & Rtilder = $mixtureR_f;

  AUSMPlusUpFluxMultiSpeciesIdealGas(
    flux,
    $Ns,
    Yl, Ul, Pgl, Tl, Rtildel, Cpl,
    Yr, Ur, Pgr, Tr, Rtilder, Cpr,
    $area.sada, $area.n, $Pambient,
    1.0
  );
}

// =============================================================================
// Farfield implementation.
// -----------------------------------------------------------------------------

$rule pointwise(
  gagePressure_f, density_f, temperature_f, velocity_f,
  mixtureW_f, mixtureR_f
  <-
  gagePressureRef, densityRef, temperatureRef, velocityRef,
  mixtureWRef, mixtureRRef,
  ci->(gagePressure, density, temperature, velocity),
  ci->(mixtureW, mixtureR, soundSpeed),
  Pambient, area
), constraint(singleSpecies, thermallyPerfectGas, farfield_BC) {
  double const & pgi = $ci->$gagePressure;
  double const & ri = $ci->$density;
  double const & Ti = $ci->$temperature;
  Loci::vector3d<double> const & ui = $ci->$velocity;
  double const & Wi = $ci->$mixtureW;
  double const & Ri = $ci->$mixtureR;
  double const & ci = $ci->$soundSpeed;
  
  double const & pgo = $gagePressureRef;
  double const & ro = $densityRef;
  double const & To = $temperatureRef;
  Loci::vector3d<double> const & uo = $velocityRef;
  double const & Wo = $mixtureWRef;
  double const & Ro = $mixtureRRef;

  double const uti = dot(ui, $area.n);
  double const uto = dot(uo, $area.n);

  double const r0 = ri;
  double const c0 = ci;
  double const r0c0 = r0*c0;

  if(uti > 0.0) { // outflow
    if(uti > ci) { // supersonic outflow
      $gagePressure_f = pgi;
      $density_f = ri;
      $temperature_f = Ti;
      $velocity_f = ui;
      $mixtureW_f = Wi;
      $mixtureR_f = Ri;
    } else { // subsonic outflow
      double const pgb = 0.5*(pgi+pgo+r0c0*(uti-uto));
      double const rb = ri+(pgb-pgi)/(c0*c0);
      Loci::vector3d<double> ub = ui+((pgi-pgb)/r0c0)*$area.n;
      double const Tb = eos_TP_T_from_r_P_R(rb, pgb+$Pambient, Ri);

      $gagePressure_f = pgb;
      $density_f = rb;
      $temperature_f = Tb;
      $velocity_f = ub;
      $mixtureW_f = Wi;
      $mixtureR_f = Ri;
    }
  } else {
    if(-uti > ci) { // supersonic inflow
      $gagePressure_f = pgo;
      $density_f = ro;
      $temperature_f = To;
      $velocity_f = uo;
      $mixtureW_f = Wo;
      $mixtureR_f = Ro;
    } else { // subsonic inflow
      double const pgb = 0.5*(pgo+pgi+r0c0*(uti-uto));
      double const rb = r0+(pgb-pgo)/(c0*c0);
      Loci::vector3d<double> ub = uo+((pgb-pgo)/r0c0)*$area.n;
      double const Tb = eos_TP_T_from_r_P_R(rb, pgb+$Pambient, Ro);

      $gagePressure_f = pgb;
      $density_f = rb;
      $temperature_f = Tb;
      $velocity_f = ub;
      $mixtureW_f = Wo;
      $mixtureR_f = Ro;
    }
  }
}

$rule pointwise(
  gagePressure_f, density_f, temperature_f, velocity_f,
  speciesY_f, speciesX_f,
  mixtureW_f, mixtureR_f
  <-
  gagePressureRef, densityRef, temperatureRef, velocityRef,
  speciesYRef, speciesXRef,
  mixtureWRef, mixtureRRef, soundSpeedRef,
  ci->(gagePressure, density, temperature, velocity),
  ci->(speciesY, speciesX),
  ci->(mixtureW, mixtureR, soundSpeed),
  Pambient, area, Ns
), constraint(multiSpecies, thermallyPerfectGas, farfield_BC), prelude {
  $speciesY_f.setVecSize(*$Ns);
  $speciesX_f.setVecSize(*$Ns);
} {
  double const & pgi = $ci->$gagePressure;
  double const & ri = $ci->$density;
  double const & Ti = $ci->$temperature;
  Loci::vector3d<double> const & ui = $ci->$velocity;
  const_Vect<double> const & Yi = $ci->$speciesY;
  const_Vect<double> const & Xi = $ci->$speciesX;
  double const & Wi = $ci->$mixtureW;
  double const & Ri = $ci->$mixtureR;
  double const & ci = $ci->$soundSpeed;

  double const & pgo = $gagePressureRef;
  double const & ro = $densityRef;
  double const & To = $temperatureRef;
  Loci::vector3d<double> const & uo = $velocityRef;
  const_Vect<double> const & Yo = $speciesYRef;
  const_Vect<double> const & Xo = $speciesXRef;
  double const & Wo = $mixtureWRef;
  double const & Ro = $mixtureRRef;
  double const & co = $soundSpeedRef;

  double const uti = dot(ui, $area.n);
  double const uto = dot(uo, $area.n);

  double const r0 = ro;
  double const c0 = co;
  double const r0c0 = r0*c0;

  if(uti > 0.0) { // outflow
    if(uti > $ci->$soundSpeed) { // supersonic outflow
      $gagePressure_f = pgi;
      $density_f = ri;
      $temperature_f = Ti;
      $velocity_f = ui;
      $speciesY_f = Yi;
      $speciesX_f = Xi;
      $mixtureW_f = Wi;
      $mixtureR_f = Ri;
    } else { // subsonic outflow
      double const pgb = 0.5*(pgi+pgo+r0c0*(uti-uto));
      double const rb = ri+(pgb-pgi)/(c0*c0);
      Loci::vector3d<double> ub = ui+((pgi-pgb)/r0c0)*$area.n;
      double const Tb = eos_TP_T_from_r_P_R(rb, pgb+$Pambient, Ri);

      $gagePressure_f = pgb;
      $density_f = rb;
      $temperature_f = Tb;
      $velocity_f = ub;
      $speciesY_f = Yi;
      $speciesX_f = Xi;
      $mixtureW_f = Wi;
      $mixtureR_f = Ri;
    }
  } else { // inflow
    if(-uti > ci) { // supersonic inflow
      $gagePressure_f = pgo;
      $density_f = ro;
      $temperature_f = To;
      $velocity_f = uo;
      $speciesY_f = Yo;
      $speciesX_f = Xo;
      $mixtureW_f = Wo;
      $mixtureR_f = Ro;
    } else { // subsonic inflow
      double const pgb = 0.5*(pgo+pgi+r0c0*(uti-uto));
      double const rb = r0+(pgb-pgo)/(c0*c0);
      Loci::vector3d<double> ub = uo+((pgb-pgo)/r0c0)*$area.n;
      double const Tb = eos_TP_T_from_r_P_R(rb, pgb+$Pambient, Ro);

      $gagePressure_f = pgb;
      $density_f = rb;
      $temperature_f = Tb;
      $velocity_f = ub;
      $speciesY_f = Yo;
      $speciesX_f = Xo;
      $mixtureW_f = Wo;
      $mixtureR_f = Ro;
    }
  }
}

$rule pointwise(
  mixtureCp_f, mixtureEnthalpy_f
  <-
  temperature_f, speciesCp_Constant
), constraint(singleSpecies, caloricallyPerfectGas, farfield_BC) {
  $mixtureCp_f = $speciesCp_Constant[0];
  $mixtureEnthalpy_f = $speciesCp_Constant[0]*$temperature_f;
}

$rule pointwise(
  mixtureCp_f, mixtureEnthalpy_f, speciesCp_f, speciesEnthalpy_f
  <-
  temperature_f, speciesY_f, speciesCp_Constant, Ns
), constraint(multiSpecies, caloricallyPerfectGas, farfield_BC), prelude {
  $speciesCp_f.setVecSize(*$Ns);
  $speciesEnthalpy_f.setVecSize(*$Ns);
} {
  for(int i = 0; i < $Ns; ++i) {
    $speciesCp_f[i] = $speciesCp_Constant[i];
    $speciesEnthalpy_f[i] = $speciesCp_Constant[i]*$temperature_f;
  }

  $mixtureCp_f = mixture_Cp_from_sCp_Y(
    $Ns, &$speciesCp_f[0], &$speciesY_f[0]
  );

  $mixtureEnthalpy_f = mixture_H_from_sH_Y(
    $Ns, &$speciesEnthalpy_f[0], &$speciesY_f[0]
  );
}

$rule pointwise(soundSpeed_f <- mixtureCp_f, mixtureR_f, temperature_f),
constraint(thermallyPerfectGas, farfield_BC) {
  $soundSpeed_f = eos_TP_a_from_Cp_R_T($mixtureCp_f, $mixtureR_f, $temperature_f);
}

$rule pointwise(
  ssConvectiveFlux_f
  <-
  leftsP(gagePressure,minPg), leftsP(temperature,Zero), leftv3d(velocity),
  gagePressure_f, temperature_f, velocity_f,
  mixtureCp_f, mixtureR_f,
  area, Pambient
), constraint(singleSpecies, thermallyPerfectGas, farfield_BC) {
  // TODO: Get Cp and R based on extrapolated primitive variables
  AUSMPlusUpFluxIdealGas(
    $ssConvectiveFlux_f,
    $leftv3d(velocity), $leftsP(gagePressure,minPg), $leftsP(temperature,Zero),
    $velocity_f, $gagePressure_f, $temperature_f,
    $area.sada, $area.n, $Pambient,
    $mixtureR_f, $mixtureCp_f, 1.0
  );
}

$rule pointwise(
  msConvectiveFlux_f
  <-
  leftsP(gagePressure,minPg), leftsP(temperature,Zero), leftv3d(velocity),
  leftvM(speciesY), ci->(mixtureCp,mixtureR),
  gagePressure_f, temperature_f, velocity_f, speciesY_f,
  mixtureCp_f, mixtureR_f,
  area, Pambient, Ns
), constraint(multiSpecies, thermallyPerfectGas, farfield_BC), prelude {
  $msConvectiveFlux_f.setVecSize(*$Ns+4);
} {
  double * flux = &($msConvectiveFlux_f[0]);

  double const * Yl = &($leftvM(speciesY)[0]);
  Loci::vector3d<double> const & Ul = $leftv3d(velocity);
  double const & Pgl = $leftsP(gagePressure,minPg);
  double const & Tl = $leftsP(temperature,Zero);
  // TODO: Get Cp and R based on extrapolated primitive variables
  double const & Cpl = $ci->$mixtureCp;
  double const & Rtildel = $ci->$mixtureR;

  double const * Yr = &($speciesY_f[0]);
  Loci::vector3d<double> const & Ur = $velocity_f;
  double const & Pgr = $gagePressure_f;
  double const & Tr = $temperature_f;
  double const & Cpr = $mixtureCp_f;
  double const & Rtilder = $mixtureR_f;

  AUSMPlusUpFluxMultiSpeciesIdealGas(
    flux,
    $Ns,
    Yl, Ul, Pgl, Tl, Rtildel, Cpl,
    Yr, Ur, Pgr, Tr, Rtilder, Cpr,
    $area.sada, $area.n, $Pambient,
    1.0
  );
}

$rule pointwise(
  msDiffusiveFlux_f <- gradv_f(speciesY), speciesY_f, speciesDiffusivity_f, density_f, area, Ns
), constraint(farfield_BC), prelude {
  $msDiffusiveFlux_f.setVecSize(*$Ns);
} {
  for(int i = 0; i < $Ns; ++i) {
    $msDiffusiveFlux_f[i] = 0.0;
  }
}

$rule pointwise(
  msDiffusiveFlux_f <- gradv_f(speciesY), speciesY_f, speciesDiffusivity_f, density_f, area, Ns
), constraint(supersonicInflow_BC), prelude {
  $msDiffusiveFlux_f.setVecSize(*$Ns);
} {
  for(int i = 0; i < $Ns; ++i) {
    $msDiffusiveFlux_f[i] = 0.0;
  }
}

$rule pointwise(
  msDiffusiveFlux_f <- gradv_f(speciesY), speciesY_f, speciesDiffusivity_f, density_f, area, Ns
), constraint(supersonicOutflow_BC), prelude {
  $msDiffusiveFlux_f.setVecSize(*$Ns);
} {
  for(int i = 0; i < $Ns; ++i) {
    $msDiffusiveFlux_f[i] = 0.0;
  }
}

// =============================================================================

} // end: namespace flame
