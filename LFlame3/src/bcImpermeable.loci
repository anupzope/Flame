#include <boundary_checker.hh>

$include "FVM.lh"
$include "flame.lh"

#include <flux.hh>
#include <eos.hh>

namespace flame {

// =============================================================================

class SymmetryBCChecker : public BoundaryChecker {
public:
  std::string boundaryConditions() override {
    return "symmetry";
  }
  
  std::string variablesChecked() override {
    return "";
  }
  
  bool checkOptions(options_list const & bc_options) override {
    return true;
  }
  
  std::ostream & errorMessage(std::ostream & s) override {
    return s;
  }
};

registerBoundaryChecker<SymmetryBCChecker> symmetryBCChecker;

$rule pointwise(gagePressure_f <- ci->gagePressure),
constraint(symmetry_BC) {
  $gagePressure_f = $ci->$gagePressure;
}

$rule pointwise(density_f <- ci->density),
constraint(symmetry_BC) {
  $density_f = $ci->$density;
}

$rule pointwise(temperature_f <- ci->temperature),
constraint(symmetry_BC) {
  $temperature_f = $ci->$temperature;
}

$rule pointwise(velocity_f <- area, ci->velocity),
constraint(symmetry_BC) {
  double const uit = dot($ci->$velocity, $area.n);
  $velocity_f = $ci->$velocity - uit*$area.n;
}

$rule pointwise(speciesY_f <- ci->speciesY, Ns),
constraint(symmetry_BC), prelude {
  $speciesY_f.setVecSize(*$Ns);
} {
  $speciesY_f = $ci->$speciesY;
}

$rule pointwise(speciesX_f <- ci->speciesX, Ns),
constraint(symmetry_BC), prelude {
  $speciesX_f.setVecSize(*$Ns);
} {
  $speciesX_f = $ci->$speciesX;
}

$rule pointwise(mixtureW_f, mixtureR_f <- ci->(mixtureW, mixtureR)),
constraint(symmetry_BC) {
  $mixtureW_f = $ci->$mixtureW;
  $mixtureR_f = $ci->$mixtureR;
}

$rule pointwise(
  mixtureCp_f, mixtureEnthalpy_f <- ci->(mixtureCp, mixtureEnthalpy)
), constraint(symmetry_BC) {
  $mixtureCp_f = $ci->$mixtureCp;
  $mixtureEnthalpy_f = $ci->$mixtureEnthalpy;
}

$rule pointwise(
  speciesCp_f, speciesEnthalpy_f <- ci->(speciesCp, speciesEnthalpy), Ns
), constraint(symmetry_BC), prelude {
  $speciesCp_f.setVecSize(*$Ns);
  $speciesEnthalpy_f.setVecSize(*$Ns);
} {
  $speciesCp_f = $ci->$speciesCp;
  $speciesEnthalpy_f = $ci->$speciesEnthalpy;
}

$rule pointwise(soundSpeed_f <- ci->soundSpeed),
constraint(symmetry_BC) {
  $soundSpeed_f = $ci->$soundSpeed;
}

$rule pointwise(ssConvectiveFlux_f <- gagePressure_f, velocity_f, area),
constraint(singleSpecies, symmetry_BC) {
  Loci::vector3d<double> const momentum = $gagePressure_f*$area.sada*$area.n;
  $ssConvectiveFlux_f[0] = momentum.x;
  $ssConvectiveFlux_f[1] = momentum.y;
  $ssConvectiveFlux_f[2] = momentum.z;
  $ssConvectiveFlux_f[3] = dot($velocity_f, momentum);
  $ssConvectiveFlux_f[4] = 0.0;
}

$rule pointwise(msConvectiveFlux_f <- gagePressure_f, velocity_f, area, Ns),
constraint(multiSpecies, symmetry_BC), prelude {
  $msConvectiveFlux_f.setVecSize(*$Ns+4);
} {
  Loci::vector3d<double> const momentum = $gagePressure_f*$area.sada*$area.n;
  $msConvectiveFlux_f[0] = momentum.x;
  $msConvectiveFlux_f[1] = momentum.y;
  $msConvectiveFlux_f[2] = momentum.z;
  $msConvectiveFlux_f[3] = dot($velocity_f, momentum);
  $msConvectiveFlux_f[4] = 0.0;
  for(int i = 0; i < $Ns-1; ++i) {
    $msConvectiveFlux_f[5+i] = 0.0;
  }
}

$rule pointwise(
  msDiffusiveFlux_f <- gradv_f(speciesY), speciesY_f, speciesDiffusivity_f,
  density_f, area, Ns
), constraint(symmetry_BC), prelude {
  $msDiffusiveFlux_f.setVecSize(*$Ns);
} {
  for(int i = 0; i < $Ns; ++i) {
    $msDiffusiveFlux_f[i] = 0.0;
  }
}

// =============================================================================

class ReflectingBCChecker : public BoundaryChecker {
public:
  std::string boundaryConditions() override {
    return "reflecting";
  }
  
  std::string variablesChecked() override {
    return "";
  }
  
  bool checkOptions(options_list const & bc_options) override {
    return true;
  }
  
  std::ostream & errorMessage(std::ostream & s) override {
    return s;
  }
};

registerBoundaryChecker<ReflectingBCChecker> reflectingBCChecker;

$rule pointwise(gagePressure_f <- area, ci->(velocity,gagePressure,density), Pambient),
constraint(reflecting_BC) {
  double const uit = dot($ci->$velocity,$area.n);
  double const Pmin = 0.5*($ci->$gagePressure+$Pambient)-$Pambient;
  $gagePressure_f = max(Pmin, $ci->$gagePressure + 0.5*($ci->$density)*uit*fabs(uit));
}

$rule pointwise(density_f <- temperature_f, gagePressure_f, mixtureR_f, Pambient),
constraint(thermallyPerfectGas, reflecting_BC) {
  $density_f = eos_TP_r_from_P_T_R(
    $gagePressure_f + $Pambient, $temperature_f, $mixtureR_f
  );
}

$rule pointwise(temperature_f <- ci->temperature),
constraint(reflecting_BC) {
  $temperature_f = $ci->$temperature;
}

$rule pointwise(velocity_f <- area, ci->velocity),
constraint(reflecting_BC) {
  double const uit = dot($ci->$velocity, $area.n);
  $velocity_f = $ci->$velocity - uit*$area.n;
}

$rule pointwise(speciesY_f <- ci->speciesY, Ns),
constraint(reflecting_BC), prelude {
  $speciesY_f.setVecSize(*$Ns);
} {
  $speciesY_f = $ci->$speciesY;
}

$rule pointwise(speciesX_f <- ci->speciesX, Ns),
constraint(reflecting_BC), prelude {
  $speciesX_f.setVecSize(*$Ns);
} {
  $speciesX_f = $ci->$speciesX;
}

$rule pointwise(mixtureW_f, mixtureR_f <- ci->(mixtureW, mixtureR)),
constraint(reflecting_BC) {
  $mixtureW_f = $ci->$mixtureW;
  $mixtureR_f = $ci->$mixtureR;
}

$rule pointwise(mixtureCp_f, mixtureEnthalpy_f <- ci->(mixtureCp, mixtureEnthalpy)),
constraint(reflecting_BC) {
  $mixtureCp_f = $ci->$mixtureCp;
  $mixtureEnthalpy_f = $ci->$mixtureEnthalpy;
}

$rule pointwise(speciesCp_f, speciesEnthalpy_f <- ci->(speciesCp, speciesEnthalpy), Ns),
constraint(reflecting_BC), prelude {
  $speciesCp_f.setVecSize(*$Ns);
  $speciesEnthalpy_f.setVecSize(*$Ns);
} {
  $speciesCp_f = $ci->$speciesCp;
  $speciesEnthalpy_f = $ci->$speciesEnthalpy;
}

$rule pointwise(soundSpeed_f <- ci->soundSpeed),
constraint(reflecting_BC) {
  $soundSpeed_f = $ci->$soundSpeed;
}

$rule pointwise(
  ssConvectiveFlux_f
  <-
  leftsP(gagePressure,minPg), leftsP(temperature,Zero), leftv3d(velocity),
  area, Pambient, speciesR, speciesCp_Constant
), constraint(singleSpecies, thermallyPerfectGas, reflecting_BC) {
  double const Pgl = $leftsP(gagePressure,minPg);
  Loci::vector3d<double> const ul = $leftv3d(velocity);
  double const Tl = $leftsP(temperature,Zero);
  
  double const Pgr = Pgl;
  Loci::vector3d<double> const ur = ul - 2.*dot(ul, $area.n)*$area.n;
  double const Tr = Tl;
  
  Loci::Array<double, 5> flux;
  
  AUSMPlusUpFluxIdealGas(
    flux,
    ul, Pgl, Tl,
    ur, Pgr, Tr,
    $area.sada, $area.n, $Pambient,
    $speciesR[0], $speciesCp_Constant[0], 1.0
  );
  
  $ssConvectiveFlux_f[0] = flux[0];
  $ssConvectiveFlux_f[1] = flux[1];
  $ssConvectiveFlux_f[2] = flux[2];
  $ssConvectiveFlux_f[3] = flux[3];
  $ssConvectiveFlux_f[4] = 0; // Mass flux should be zero for this BC
}

$rule pointwise(
  msConvectiveFlux_f
  <-
  leftsP(gagePressure,minPg), leftv3d(velocity), leftsP(temperature,Zero),
  leftvM(speciesY), ci->(mixtureCp, mixtureR), area, Pambient, Ns
), constraint(multiSpecies, thermallyPerfectGas, reflecting_BC), prelude {
  $msConvectiveFlux_f.setVecSize(*$Ns+4);
} {
  double * flux = &($msConvectiveFlux_f[0]);
  
  double const * Yl = &($leftvM(speciesY)[0]);
  Loci::vector3d<double> const & Ul = $leftv3d(velocity);
  double const & Pgl = $leftsP(gagePressure,minPg);
  double const & Tl = $leftsP(temperature,Zero);
  double const & Cpl = $ci->$mixtureCp;
  double const & Rtildel = $ci->$mixtureR;
  
  double const * Yr = Yl;
  Loci::vector3d<double> const & Ur = Ul;
  double const & Pgr = Pgl;
  double const & Tr = Tl;
  double const & Cpr = Cpl;
  double const & Rtilder = Rtildel;
  
  AUSMPlusUpFluxMultiSpeciesIdealGas(
    flux,
    $Ns,
    Yl, Ul, Pgl, Tl, Rtildel, Cpl,
    Yr, Ur, Pgr, Tr, Rtilder, Cpr,
    $area.sada, $area.n, $Pambient,
    1.0
  );
  
  flux[4] = 0.0;
  for(int i = 0; i < $Ns-1; ++i) {
    flux[5+i] = 0.0;
  }
}

$rule pointwise(
  msDiffusiveFlux_f <- gradv_f(speciesY), speciesY_f, speciesDiffusivity_f,
  density_f, area, Ns
), constraint(reflecting_BC), prelude {
  $msDiffusiveFlux_f.setVecSize(*$Ns);
} {
  for(int i = 0; i < $Ns; ++i) {
    $msDiffusiveFlux_f[i] = 0.0;
  }
}

// =============================================================================

} // end: namespace flame
