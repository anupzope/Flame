#include <flame.hh>
#include <plot.hh>
#include <initialConditions.hh>

$include "FVM.lh"
$include "flame.lh"

#include <sstream>

#include <glog/logging.h>

#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
#include <fcntl.h>

namespace flame {

// =============================================================================

$rule optional(initialConditions) {
}

$rule optional(initialConditionsTGV) {
}

// =============================================================================

$rule unit(gagePressure_ic), constraint(geom_cells) {
  $gagePressure_ic = 0.0;
}

$rule unit(velocity_ic), constraint(geom_cells) {
  $velocity_ic = Loci::vector3d<double>(0.0, 0.0, 0.0);
}

$rule unit(temperature_ic), constraint(geom_cells) {
  $temperature_ic = 0.0;
}

$rule unit(speciesY_ic <- Ns),
constraint(geom_cells, multiSpecies), prelude {
  $speciesY_ic.setVecSize(*$Ns);
} {
  $speciesY_ic = mk_Scalar(0.0);
}

// =============================================================================

$type thermoIC param<ThermoSpec>;
$type velocityIC param<VelSpec>;
$type speciesIC param<SpeciesSpec>;

$rule singleton(thermoIC <- initialConditions), constraint(UNIVERSE) {
  LOG(INFO) << "Parsing thermodynamic variables from initialConditions";
  
  int error = 0;
  std::ostringstream errmsg;
  
  error += getThermoSpec(
    $initialConditions, "initialConditions",
    "pressure", "temperature", "density",
     $thermoIC, errmsg
  );
  
  if(error) {
    LOG(ERROR) << errmsg.str();
    Loci::Abort();
  }
}

$rule singleton(velocityIC <- initialConditions), constraint(UNIVERSE) {
  LOG(INFO) << "Parsing velocity variables from initialConditions";
  
  int error = 0;
  std::ostringstream errmsg;
  
  error += getVelSpec(
    $initialConditions, "initialConditions",
    "velocity", "Mach",
    $velocityIC, errmsg
  );
  
  if(error) {
    LOG(ERROR) << errmsg.str();
    Loci::Abort();
  }
}

$rule singleton(speciesIC <- initialConditions, Ns), constraint(UNIVERSE) {
  LOG(INFO) << "Parsing species fractions from initialConditions";
  
  int error = 0;
  std::ostringstream errmsg;
  
  error += getSpeciesSpec(
    $initialConditions, "initialConditions",
    "molarFractions", "massFractions", $Ns,
     $speciesIC, errmsg
  );
  
  if(error) {
    LOG(ERROR) << errmsg.str();
    Loci::Abort();
  }
}

// -----------------------------------------------------------------------------

$rule singleton(
  icGagePressure, icTemperature
  <-
  thermoIC, speciesR, Pambient
), constraint(singleSpecies, idealGas) {
  switch($thermoIC.type) {
  case THERMO_SPEC_PT:
    $icGagePressure = $thermoIC.pressure - $Pambient;
    $icTemperature = $thermoIC.temperature;
    break;
  case THERMO_SPEC_DT:
    $icGagePressure = $thermoIC.density*$speciesR[0]*$thermoIC.temperature - $Pambient;
    $icTemperature = $thermoIC.temperature;
    break;
  case THERMO_SPEC_DP:
    $icGagePressure = $thermoIC.pressure - $Pambient;
    $icTemperature = $thermoIC.pressure/($thermoIC.density*$speciesR[0]);
    break;
  }
}

$rule singleton(
  icVelocity
  <-
  icGagePressure, icTemperature, velocityIC,
  speciesConstantCp, speciesR
), constraint(singleSpecies, idealGas, caloricallyPerfectGas) {
  switch($velocityIC.type) {
  case VEL_SPEC_VELOCITY:
    $icVelocity = $velocityIC.scale*$velocityIC.direction;
    break;
  case VEL_SPEC_MACH:
    {
      double const Cp = $speciesConstantCp[0];
      double const Cv = $speciesConstantCp[0] - $speciesR[0];
      double const gamma = Cp/Cv;
      double const a = sqrt(gamma*$speciesR[0]*$icTemperature);
      $icVelocity = (a*$velocityIC.scale)*$velocityIC.direction;
    }
    break;
  }
}

// -----------------------------------------------------------------------------

$rule singleton(
  icSpeciesY, icMixtureW, icMixtureR
  <-
  speciesIC, speciesW, Runiv, Ns
), constraint(multiSpecies) {
  $icSpeciesY.resize($Ns);
  
  switch($speciesIC.type) {
  case SPECIES_SPEC_X:
    {
      $icMixtureW = 0.0;
      for(int i = 0; i < $Ns; ++i) {
        $icMixtureW += $speciesIC.fractions.data[i]*$speciesW[i];
      }
      for(int i = 0; i < $Ns; ++i) {
        $icSpeciesY[i] = $speciesIC.fractions.data[i]*$speciesW[i]/$icMixtureW;
      }
      $icMixtureR = $Runiv/$icMixtureW;
    }
    break;
  case SPECIES_SPEC_Y:
    {
      double rW = 0.0;
      for(int i = 0; i < $Ns; ++i) {
        $icSpeciesY[i] = $speciesIC.fractions.data[i];
        rW += $speciesIC.fractions.data[i]/$speciesW[i];
      }
      $icMixtureR = $Runiv*rW;
      $icMixtureW = 1.0/rW;
    }
    break;
  }
}

$rule singleton(
  icGagePressure, icTemperature
  <-
  thermoIC, icMixtureR, Pambient
), constraint(multiSpecies, idealGas) {
  switch($thermoIC.type) {
  case THERMO_SPEC_PT:
    $icGagePressure = $thermoIC.pressure - $Pambient;
    $icTemperature = $thermoIC.temperature;
    break;
  case THERMO_SPEC_DT:
    $icGagePressure = $thermoIC.density*$icMixtureR*$thermoIC.temperature - $Pambient;
    $icTemperature = $thermoIC.temperature;
    break;
  case THERMO_SPEC_DP:
    $icGagePressure = $thermoIC.pressure - $Pambient;
    $icTemperature = $thermoIC.pressure/($thermoIC.density*$icMixtureR);
    break;
  }
}

$rule singleton(
  icVelocity
  <-
  icGagePressure, icTemperature, velocityIC,
  speciesConstantCp, icMixtureR, icSpeciesY, Ns
), constraint(multiSpecies, idealGas, caloricallyPerfectGas) {
  switch($velocityIC.type) {
  case VEL_SPEC_VELOCITY:
    $icVelocity = $velocityIC.scale*$velocityIC.direction;
    break;
  case VEL_SPEC_MACH:
    {
      double Cp = 0.0;
      for(int i = 0; i < $Ns; ++i) {
        Cp += $speciesConstantCp[0]*$icSpeciesY[i];
      }
      double const Cv = Cp - $icMixtureR;
      double const gamma = Cp/Cv;
      double const a = sqrt(gamma*$icMixtureR*$icTemperature);
      $icVelocity = (a*$velocityIC.scale)*$velocityIC.direction;
    }
    break;
  }
}

// -----------------------------------------------------------------------------

$rule apply(gagePressure_ic <- icGagePressure)[Loci::Summation],
constraint(withoutICDirectory) {
  join($gagePressure_ic, $icGagePressure);
}

$rule apply(velocity_ic <- icVelocity)[Loci::Summation],
constraint(withoutICDirectory) {
  join($velocity_ic, $icVelocity);
}

$rule apply(temperature_ic <- icTemperature)[Loci::Summation],
constraint(withoutICDirectory) {
  join($temperature_ic, $icTemperature);
}

$rule apply(speciesY_ic <- icSpeciesY, Ns)[Loci::Summation],
constraint(withoutICDirectory) {
  for(int i = 0; i < $Ns; ++i) {
    $speciesY_ic[i] += $icSpeciesY[i];
  }
}

// =============================================================================

$type gagePressure_TGV_ic store<double>;
$type velocity_TGV_ic store<Loci::vector3d<double> >;
$type temperature_TGV_ic store<double>;
$type speciesY_TGV_ic storeVec<double>;

$rule singleton(tgvICParameters <- initialConditionsTGV) {
  LOG(INFO) << "Parsing initialConditionsTGV";
  
  bool XrefSet = false;
  Loci::vector3d<double> Xref;
  
  bool LrefSet = false;
  Loci::vector3d<double> Lref;
  
  bool KrefSet = false;
  Loci::vector3d<double> Kref;
  
  bool PrefSet = false;
  double Pref;
  
  bool TrefSet = false;
  double Tref;
  
  bool rhorefSet = false;
  double rhoref;
  
  bool UrefSet;
  double Uref;
  
  std::ostringstream errmsg;
  int error = 0;
  
  options_list::option_namelist li = $initialConditionsTGV.getOptionNameList();
  for(auto const & optName : li) {
    if(optName == "X") {
      std::ostringstream ss;
      std::vector<double> values;
      int err = getOptionValues(
        $initialConditionsTGV, optName, {"m", "m", "m"}, 1, 3, values, ss
      );
      
      if(err) {
        errmsg << "[Error parsing initialConditionsTGV::" << optName
          << " : " << ss.str() << "]";
        ++error;
      } else {
        XrefSet = true;
        switch(values.size()) {
        case 1:
          Xref.x = values[0];
          Xref.y = 0.0;
          Xref.z = 0.0;
          break;
        case 2:
          Xref.x = values[0];
          Xref.y = values[1];
          Xref.z = 0.0;
          break;
        case 3:
          Xref.x = values[0];
          Xref.y = values[1];
          Xref.z = values[2];
          break;
        }
      }
    } else if(optName == "L") {
      std::ostringstream ss;
      std::vector<double> values;
      int err = getOptionValues(
        $initialConditionsTGV, optName, {"m", "m", "m"}, 1, 3, values, ss
      );
      
      if(err) {
        errmsg << "[Error parsing initialConditionsTGV::" << optName
          << " : " << ss.str() << "]";
        ++error;
      } else {
        LrefSet = true;
        switch(values.size()) {
        case 1:
          Lref.x = values[0];
          Lref.y = 1.0;
          Lref.z = 1.0;
          break;
        case 2:
          Lref.x = values[0];
          Lref.y = values[1];
          Lref.z = 1.0;
          break;
        case 3:
          Lref.x = values[0];
          Lref.y = values[1];
          Lref.z = values[2];
          break;
        }
      }
    } else if(optName == "K") {
      std::ostringstream ss;
      std::vector<double> values;
      int err = getOptionValues(
        $initialConditionsTGV, optName, {"", "", ""}, 1, 3, values, ss
      );
      
      if(err) {
        errmsg << "[Error parsing initialConditionsTGV::K : " << ss.str() << "]";
        ++error;
      } else {
        KrefSet = true;
        switch(values.size()) {
        case 1:
          Kref.x = values[0];
          Kref.y = 1.0;
          Kref.z = 1.0;
          break;
        case 2:
          Kref.x = values[0];
          Kref.y = values[1];
          Kref.z = 1.0;
          break;
        case 3:
          Kref.x = values[0];
          Kref.y = values[1];
          Kref.z = values[2];
          break;
        }
      }
    } else if(optName == "p") {
      std::ostringstream ss;
      double value;
      int err = getOptionValue(
        $initialConditionsTGV, optName, "Pa", value, ss
      );
      
      if(err) {
        errmsg << "[Error parsing initialConditionsTGV::" << optName
          << " : " << ss.str() << "]";
        ++error;
      } else {
        PrefSet = true;
        Pref = value;
      }
    } else if(optName == "T") {
      std::ostringstream ss;
      double value;
      int err = getOptionValue(
        $initialConditionsTGV, optName, "K", value, ss
      );
      
      if(err) {
        errmsg << "[Error parsing initialConditionsTGV::" << optName
          << " : " << ss.str() << "]";
        ++error;
      } else {
        TrefSet = true;
        Tref = value;
      }
    } else if(optName == "rho") {
      std::ostringstream ss;
      double value;
      int err = getOptionValue(
        $initialConditionsTGV, optName, "kg/m/m/m", value, ss
      );
      
      if(err) {
        errmsg << "[Error parsing initialConditionsTGV::" << optName
          << " : " << ss.str() << "]";
        ++error;
      } else {
        rhorefSet = true;
        rhoref = value;
      }
    } else if(optName == "u" || optName == "v") {
      std::ostringstream ss;
      double value;
      int err = getOptionValue(
        $initialConditionsTGV, optName, "m/s", value, ss
      );
      
      if(err) {
        errmsg << "[Error parsing initialConditionsTGV::" << optName
          << " : " << ss.str() << "]";
        ++error;
      } else {
        UrefSet = true;
        Uref = value;
      }
    } else {
      errmsg << "[unknown option initialConditionsTGV::" << optName << "]";
      ++error;
    }
  }
  
  if(!XrefSet || !LrefSet || !KrefSet || !PrefSet || !rhorefSet || !UrefSet) {
    errmsg << "[initialConditionsTGV requires X, L, K, p, rho, and u/v]";
    ++error;
  }
  
  if(error) {
    LOG(ERROR) << errmsg.str();
    Loci::Abort();
  } else {
    $tgvICParameters.Xref = Xref;
    $tgvICParameters.Lref = Lref;
    $tgvICParameters.Kref = Kref;
    $tgvICParameters.Pref = Pref;
    $tgvICParameters.rhoref = rhoref;
    $tgvICParameters.Uref = Uref;
  }
}

$rule pointwise(
  gagePressure_TGV_ic, velocity_TGV_ic, temperature_TGV_ic
  <-
  speciesR, Pambient, cellcenter, tgvICParameters
), constraint(geom_cells, idealGas, singleSpecies) {
  double const x = $cellcenter.x;
  double const y = $cellcenter.y;
  double const z = $cellcenter.z;
  
  double const x0 = $tgvICParameters.Xref.x;
  double const y0 = $tgvICParameters.Xref.y;
  double const z0 = $tgvICParameters.Xref.z;
  
  double const Lx = $tgvICParameters.Lref.x;
  double const Ly = $tgvICParameters.Lref.y;
  double const Lz = $tgvICParameters.Lref.z;
  
  double const Kx = $tgvICParameters.Kref.x;
  double const Ky = $tgvICParameters.Kref.y;
  double const Kz = $tgvICParameters.Kref.z;
  
  double const P0 = $tgvICParameters.Pref;
  double const T0 = $tgvICParameters.Tref;
  double const rho0 = $tgvICParameters.rhoref;
  double const U0 = $tgvICParameters.Uref;
  
  double const U02 = U0*U0;
  
  double const P = P0 + 0.0625*rho0*U02*(
    std::cos(2.0*Kx*(x-x0)/Lx) + std::cos(2.0*Ky*(y-y0)/Ly)
  )*(2.0 + std::cos(2.0*Kz*(z-z0)/Lz));
  
  $gagePressure_TGV_ic = P - $Pambient;
  
  $velocity_TGV_ic = Loci::vector3d<double>(
     U0*std::sin(Kx*(x-x0)/Lx)*std::cos(Ky*(y-y0)/Ly)*std::cos(Kz*(z-z0)/Lz),
    -U0*std::cos(Kx*(x-x0)/Lx)*std::sin(Ky*(y-y0)/Ly)*std::cos(Kz*(z-z0)/Lz),
    0.0
  );
  
  $temperature_TGV_ic = P/($speciesR[0]*rho0);
}

$rule pointwise(
  gagePressure_TGV_ic, velocity_TGV_ic, temperature_TGV_ic, speciesY_TGV_ic
  <-
  speciesR, Pambient, cellcenter, tgvICParameters, Ns
), constraint(geom_cells, idealGas, multiSpecies), prelude {
  $speciesY_TGV_ic.setVecSize(*$Ns);
} {
  double const x = $cellcenter.x;
  double const y = $cellcenter.y;
  double const z = $cellcenter.z;
  
  double const x0 = $tgvICParameters.Xref.x;
  double const y0 = $tgvICParameters.Xref.y;
  double const z0 = $tgvICParameters.Xref.z;
  
  double const Lx = $tgvICParameters.Lref.x;
  double const Ly = $tgvICParameters.Lref.y;
  double const Lz = $tgvICParameters.Lref.z;
  
  double const Kx = $tgvICParameters.Kref.x;
  double const Ky = $tgvICParameters.Kref.y;
  double const Kz = $tgvICParameters.Kref.z;
  
  double const P0 = $tgvICParameters.Pref;
  double const T0 = $tgvICParameters.Tref;
  double const rho0 = $tgvICParameters.rhoref;
  double const U0 = $tgvICParameters.Uref;
  
  double const dy = $tgvICParameters.Lref.y/$Ns;
  
  int const yi = ((int)(abs($cellcenter.y/dy)))%$Ns;
  for(int i = 0; i < $Ns; ++i) {
    $speciesY_TGV_ic[i] = 0.0;
  }
  $speciesY_TGV_ic[yi] = 1.0;
  
  double const U02 = U0*U0;
  
  double const P = P0 + 0.0625*rho0*U02*(
    std::cos(2.0*Kx*(x-x0)/Lx) + std::cos(2.0*Ky*(y-y0)/Ly)
  )*(2.0 + std::cos(2.0*Kz*(z-z0)/Lz));
  
  $gagePressure_TGV_ic = P - $Pambient;
  
  $velocity_TGV_ic = Loci::vector3d<double>(
     U0*std::sin(Kx*(x-x0)/Lx)*std::cos(Ky*(y-y0)/Ly)*std::cos(Kz*(z-z0)/Lz),
    -U0*std::cos(Kx*(x-x0)/Lx)*std::sin(Ky*(y-y0)/Ly)*std::cos(Kz*(z-z0)/Lz),
    0.0
  );
  
  $temperature_TGV_ic = P/($speciesR[yi]*rho0);
}

// =============================================================================

$rule apply(gagePressure_ic <- gagePressure_TGV_ic)[Loci::Summation],
constraint(geom_cells, withoutICDirectory) {
  join($gagePressure_ic, $gagePressure_TGV_ic);
}

$rule apply(velocity_ic <- velocity_TGV_ic)[Loci::Summation],
constraint(geom_cells, withoutICDirectory) {
  join($velocity_ic, $velocity_TGV_ic);
}

$rule apply(temperature_ic <- temperature_TGV_ic)[Loci::Summation],
constraint(geom_cells, withoutICDirectory) {
  join($temperature_ic, $temperature_TGV_ic);
}

$rule apply(speciesY_ic <- speciesY_TGV_ic)[Loci::Summation],
constraint(geom_cells, withoutICDirectory) {
  join($speciesY_ic, $speciesY_TGV_ic);
}

//$rule pointwise(
//  mixtureW_ic, mixtureR_ic, mixtureCp_ic
//  <-
//  speciesY_ic, speciesW, speciesConstantCp, Runiv, Ns
//), constraint(geom_cells, multiSpecies, caloricallyPerfectGas) {
//  double W = 0.0;
//  double R = 0.0;
//  double Cp = 0.0;
//  for(int i = 0; i < $Ns; ++i) {
//    W += $speciesY_ic[i]/$speciesW[i];
//    Cp += $speciesY_ic[i]*$speciesConstantCp[i];
//  }
//  R = $Runiv*W;
//  W = 1.0/W;
//  
//  $mixtureW_ic = W;
//  $mixtureR_ic = R;
//  $mixtureCp_ic = Cp;
//}

//$rule pointwise(mixtureW_ic <- speciesY_ic, speciesW, Ns),
//constraint(geom_cells, multiSpecies) {
//  double sum = 0.0;
//  for(int i = 0; i < $Ns; ++i) {
//    sum += $speciesY_ic[i]/$speciesW[i];
//  }
//  $mixtureW_ic = 1.0/sum;
//}

//$rule pointwise(mixtureR_ic <- Runiv, mixtureW_ic),
//constraint(geom_cells, multiSpecies) {
//  $mixtureR_ic = $Runiv/$mixtureW_ic;
//}

//$rule pointwise(mixtureGamma_ic <- speciesY_ic, speciesGamma, Ns),
//constraint(geom_cells, multiSpecies, idealGas) {
//  double sum = 0.0;
//  for(int i = 0; i < $Ns; ++i) {
//    sum += $speciesY_ic[i]/($speciesGamma[i]-1.0);
//  }
//  $mixtureGamma_ic = 1.0/sum + 1.0;
//}

//$rule pointwise(mixtureCp_ic <- mixtureR_ic, mixtureGamma_ic),
//constraint(geom_cells, multiSpecies, idealGas) {
//  $mixtureCp_ic = $mixtureGamma_ic*$mixtureR_ic/($mixtureGamma_ic-1.0);
//}

//$rule pointwise(mixtureEnthalpy_ic <- mixtureCp_ic, temperature_ic),
//constraint(geom_cells, multiSpecies, idealGas) {
//  $mixtureEnthalpy_ic = $mixtureCp_ic*$temperature_ic;
//}

$rule unit(timeStep_ic), constraint(UNIVERSE) {
  $timeStep_ic = 0;
}

$rule apply(timeStep_ic <- timeStepSize)[Loci::Maximum], prelude {
};

$rule unit(stime_ic), constraint(UNIVERSE) {
  $stime_ic = 0.0;
}

$rule apply(stime_ic <- timeStepSize)[Loci::Maximum], prelude {
};

// =============================================================================
// Load the initial conditions from file
// =============================================================================

$type timeStep_icf param<int>;
$type stime_icf param<double>;
$type gagePressure_icf store<double>;
$type velocity_icf store<Loci::vector3d<double> >;
$type temperature_icf store<double>;
$type speciesY_icf storeVec<double>;

class TimeStepFromFile : public singleton_rule {
  const_param<std::string> icDirectory, caseName;
  param<double> stime;
  param<int> timeStep;
  
public:
  TimeStepFromFile();
  virtual void compute(sequence const & seq);
};

TimeStepFromFile::TimeStepFromFile() {
  name_store("icDirectory", icDirectory);
  name_store("caseName", caseName);
  name_store("stime_icf", stime);
  name_store("timeStep_icf", timeStep);
  input("icDirectory,caseName");
  output("stime_icf,timeStep_icf");
  disable_threading();
}

void TimeStepFromFile::compute(sequence const & seq) {
  if(Loci::GLOBAL_AND(seq == EMPTY)) {
    return;
  }
  
  std::string filename = *icDirectory + "flowVars_" + *caseName;
  
  hid_t fileId = Loci::hdf5OpenFile(filename.c_str(), H5F_ACC_RDONLY, H5P_DEFAULT);
  Loci::entitySet dom = ~EMPTY;
  *stime = 0.0;
  *timeStep = 0;
  Loci::readContainer(fileId, "stime", stime.Rep(), dom);
  Loci::readContainer(fileId, "timeStep", timeStep.Rep(), dom);
  Loci::hdf5CloseFile(fileId);
}

Loci::register_rule<TimeStepFromFile> registerTimeStepFromFile;

$rule apply(timeStep_ic <- timeStep_icf)[Loci::Maximum] {
  join($timeStep_ic, $timeStep_icf);
}

$rule apply(stime_ic <- stime_icf)[Loci::Maximum] {
  join($stime_ic, $stime_icf);
}

$rule pointwise(
  gagePressure_icf, velocity_icf, temperature_icf
  <-
  icDirectory, caseName, Pambient
), constraint(geom_cells, singleSpecies, withICDirectory),
option(disable_threading), prelude {
  std::string filename = *$icDirectory + "flowVars_" + *$caseName;
  
  $[Once] {
    LOG(INFO) << "Reading flow variables from " << filename;
  }
  
  struct stat buf;
  int has_file = 0;
  $[Once] {
    if(stat(filename.c_str(), &buf) == 0) {
      if(buf.st_size != 0 && S_ISREG(buf.st_mode)) {
        has_file = 1;
      } else {
        has_file = 2;
      }
    }
  }
  
  MPI_Bcast(&has_file, 1, MPI_INT, 0, MPI_COMM_WORLD);
  if(has_file == 2) {
    $[Once] {
      LOG(ERROR) << "Unable to find file '" << filename << "'";
    }
    Loci::Abort();
  }
  
  hid_t fileId = Loci::hdf5OpenFile(filename.c_str(), H5F_ACC_RDONLY, H5P_DEFAULT);
  
  Loci::entitySet readSet = entitySet(seq);
  Loci::readContainer(fileId, "gagePressure", $gagePressure_icf.Rep(), readSet);
  Loci::readContainer(fileId, "velocity", $velocity_icf.Rep(), readSet);
  Loci::readContainer(fileId, "temperature", $temperature_icf.Rep(), readSet);
  param<double> Pref;
  Loci::readContainer(fileId, "Pambient", Pref.Rep(), readSet);
  double dp = *Pref-*$Pambient;
  FORALL(readSet, ii) {
    $gagePressure_icf[ii] += dp;
  } ENDFORALL;
  Loci::hdf5CloseFile(fileId);
};

$rule pointwise(
  gagePressure_icf, velocity_icf, temperature_icf, speciesY_icf
  <-
  icDirectory, caseName, Pambient, Ns
), constraint(geom_cells, multiSpecies, withICDirectory),
option(disable_threading), prelude {
  $speciesY_icf.setVecSize(*$Ns);
  
  std::string filename = *$icDirectory + "flowVars_" + *$caseName;
  
  $[Once] {
    LOG(INFO) << "Reading flow variables from " << filename;
  }
  
  struct stat buf;
  int has_file = 0;
  $[Once] {
    if(stat(filename.c_str(), &buf) == 0) {
      if(buf.st_size != 0 && S_ISREG(buf.st_mode)) {
        has_file = 1;
      } else {
        has_file = 2;
      }
    }
  }
  
  MPI_Bcast(&has_file, 1, MPI_INT, 0, MPI_COMM_WORLD);
  if(has_file == 2) {
    $[Once] {
      LOG(ERROR) << "Unable to find file '" << filename << "'";
    }
    Loci::Abort();
  }
  
  hid_t fileId = Loci::hdf5OpenFile(filename.c_str(), H5F_ACC_RDONLY, H5P_DEFAULT);
  
  Loci::entitySet readSet = entitySet(seq);
  Loci::readContainer(fileId, "gagePressure", $gagePressure_icf.Rep(), readSet);
  Loci::readContainer(fileId, "velocity", $velocity_icf.Rep(), readSet);
  Loci::readContainer(fileId, "temperature", $temperature_icf.Rep(), readSet);
  Loci::readContainer(fileId, "speciesY", $speciesY_icf.Rep(), readSet);
  param<double> Pref;
  Loci::readContainer(fileId, "Pambient", Pref.Rep(), readSet);
  double dp = *Pref-*$Pambient;
  FORALL(readSet, ii) {
    $gagePressure_icf[ii] += dp;
  } ENDFORALL;
  Loci::hdf5CloseFile(fileId);
};

$rule apply(gagePressure_ic <- gagePressure_icf)[Loci::Summation],
constraint(geom_cells, withICDirectory) {
  join($gagePressure_ic, $gagePressure_icf);
}

$rule apply(velocity_ic <- velocity_icf)[Loci::Summation],
constraint(geom_cells, withICDirectory) {
  join($velocity_ic, $velocity_icf);
}

$rule apply(temperature_ic <- temperature_icf)[Loci::Summation],
constraint(geom_cells, withICDirectory) {
  join($temperature_ic, $temperature_icf);
}

$rule apply(speciesY_ic <- speciesY_icf)[Loci::Summation],
constraint(geom_cells, withICDirectory) {
  join($speciesY_ic, $speciesY_icf);
}

} // end: namespace flame