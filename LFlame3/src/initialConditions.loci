#include <flame.hh>
#include <plot.hh>

$include "FVM.lh"
$include "flame.lh"

#include <sstream>

$rule unit(gagePressure_ic), constraint(geom_cells) {
  $gagePressure_ic = 0.0;
}

$rule unit(velocity_ic), constraint(geom_cells) {
  $velocity_ic = Loci::vector3d<double>(0.0, 0.0, 0.0);
}

$rule unit(temperature_ic), constraint(geom_cells) {
  $temperature_ic = 0.0;
}

$rule unit(speciesY_ic <- Ns),
constraint(geom_cells, multiSpecies), prelude {
  $speciesY_ic.setVecSize(*$Ns);
} {
  $speciesY_ic = mk_Scalar(0.0);
}

$type gagePressure_TGV_ic store<double>;
$type velocity_TGV_ic store<Loci::vector3d<double> >;
$type temperature_TGV_ic store<double>;
$type speciesY_TGV_ic storeVec<double>;

$rule pointwise(
  gagePressure_TGV_ic, velocity_TGV_ic, temperature_TGV_ic
  <-
  speciesR, Pambient, cellcenter
), constraint(geom_cells, singleSpecies) {
  double x = $cellcenter.x;
  double y = $cellcenter.y;
  double z = $cellcenter.z;
  
  double x0 = 0.0;
  double y0 = 0.0;
  double z0 = 0.0;
  
  double Lx = 0.5;
  double Ly = 0.5;
  double Lz = 0.5;
  
  double U0 = 1.0;
  double U02 = U0*U0;
  
  double P0 = $Pambient + 100.0;
  
  double rho0 = 1.0;
  
  double T0 = P0/($speciesR[0]*rho0);
  
  $gagePressure_TGV_ic = P0 + 0.0625*rho0*(
    std::cos(2.0*(x-x0)/Lx) + std::cos(2.0*(y-y0)/Ly)
  )*(2.0 + std::cos(2.0*(z-z0)/Lz)) - $Pambient;
  
  $velocity_TGV_ic = Loci::vector3d<double>(
     U0*std::sin((x-x0)/Lx)*std::cos((y-y0)/Ly)*std::cos((z-z0)/Lz),
    -U0*std::cos((x-x0)/Lx)*std::sin((y-y0)/Ly)*std::cos((z-z0)/Lz),
    0.0
  );
  
  $temperature_TGV_ic = T0;
}

$rule pointwise(
  gagePressure_TGV_ic, velocity_TGV_ic, temperature_TGV_ic, speciesY_TGV_ic
  <-
  Pambient, speciesR, speciesW, Runiv, cellcenter, Ns
), constraint(geom_cells, multiSpecies), prelude {
  $speciesY_TGV_ic.setVecSize(*$Ns);
} {
  double x = $cellcenter.x;
  double y = $cellcenter.y;
  double z = $cellcenter.z;
  
  double x0 = 0.0;
  double y0 = 0.0;
  double z0 = 0.0;
  
  double Lx = 1.0;
  double Ly = 1.0;
  double Lz = 1.0;
  
  double U0 = 1.0;
  double U02 = U0*U0;
  
  double P0 = $Pambient + 100.0;
  
  double rho0 = 1.0;
  
  if($cellcenter.y > 0.5 || $cellcenter.y < -0.5) {
    for(int i = 0; i < $Ns; ++i) {
      $speciesY_TGV_ic[i] = 0.0;
    }
    $speciesY_TGV_ic[0] = 1.0;
  } else {
    for(int i = 0; i < $Ns; ++i) {
      $speciesY_TGV_ic[i] = 0.0;
    }
    $speciesY_TGV_ic[1] = 1.0;
  }
  
  //for(int i = 0; i < $Ns; ++i) {
  //  $speciesY_TGV_ic[i] = 0.0;
  //}
  //$speciesY_TGV_ic[0] = 0.5;
  //$speciesY_TGV_ic[1] = 0.5;
  
  //for(int i = 0; i < $Ns; ++i) {
  //  $speciesY_TGV_ic[i] = 0.0;
  //}
  //$speciesY_TGV_ic[0] = 0.232909218;
  //$speciesY_TGV_ic[1] = 0.767090782;
  
  double mixtureW = 0.0;
  for(int i = 0; i < $Ns; ++i) {
    mixtureW += $speciesY_TGV_ic[i]/$speciesW[i];
  }
  mixtureW = 1.0/mixtureW;
  
  double mixtureR = $Runiv/mixtureW;
  
  double T0 = P0/(mixtureR*rho0);
  
  double const K = (std::atan(1.0)*4.0);
  
  $gagePressure_TGV_ic = P0 + 0.0625*rho0*(
    std::cos(2.0*K*(x-x0)/Lx) + std::cos(2.0*K*(y-y0)/Ly)
  )*(2.0 + std::cos(2.0*K*(z-z0)/Lz)) - $Pambient;
  
  $velocity_TGV_ic = Loci::vector3d<double>(
     U0*std::sin(K*(x-x0)/Lx)*std::cos(K*(y-y0)/Ly)*std::cos(K*(z-z0)/Lz),
    -U0*std::cos(K*(x-x0)/Lx)*std::sin(K*(y-y0)/Ly)*std::cos(K*(z-z0)/Lz),
    0.0
  );
  
  $temperature_TGV_ic = T0;
}

// =============================================================================

$rule apply(gagePressure_ic <- gagePressure_TGV_ic)[Loci::Summation] {
  join($gagePressure_ic, $gagePressure_TGV_ic);
}

$rule apply(velocity_ic <- velocity_TGV_ic)[Loci::Summation] {
  join($velocity_ic, $velocity_TGV_ic);
}

$rule apply(temperature_ic <- temperature_TGV_ic)[Loci::Summation] {
  join($temperature_ic, $temperature_TGV_ic);
}

$rule apply(speciesY_ic <- speciesY_TGV_ic)[Loci::Summation] {
  join($speciesY_ic, $speciesY_TGV_ic);
}

//$rule pointwise(
//  mixtureW_ic, mixtureR_ic, mixtureCp_ic
//  <-
//  speciesY_ic, speciesW, speciesConstantCp, Runiv, Ns
//), constraint(geom_cells, multiSpecies, caloricallyPerfectGas) {
//  double W = 0.0;
//  double R = 0.0;
//  double Cp = 0.0;
//  for(int i = 0; i < $Ns; ++i) {
//    W += $speciesY_ic[i]/$speciesW[i];
//    Cp += $speciesY_ic[i]*$speciesConstantCp[i];
//  }
//  R = $Runiv*W;
//  W = 1.0/W;
//  
//  $mixtureW_ic = W;
//  $mixtureR_ic = R;
//  $mixtureCp_ic = Cp;
//}

//$rule pointwise(mixtureW_ic <- speciesY_ic, speciesW, Ns),
//constraint(geom_cells, multiSpecies) {
//  double sum = 0.0;
//  for(int i = 0; i < $Ns; ++i) {
//    sum += $speciesY_ic[i]/$speciesW[i];
//  }
//  $mixtureW_ic = 1.0/sum;
//}

//$rule pointwise(mixtureR_ic <- Runiv, mixtureW_ic),
//constraint(geom_cells, multiSpecies) {
//  $mixtureR_ic = $Runiv/$mixtureW_ic;
//}

//$rule pointwise(mixtureGamma_ic <- speciesY_ic, speciesGamma, Ns),
//constraint(geom_cells, multiSpecies, idealGas) {
//  double sum = 0.0;
//  for(int i = 0; i < $Ns; ++i) {
//    sum += $speciesY_ic[i]/($speciesGamma[i]-1.0);
//  }
//  $mixtureGamma_ic = 1.0/sum + 1.0;
//}

//$rule pointwise(mixtureCp_ic <- mixtureR_ic, mixtureGamma_ic),
//constraint(geom_cells, multiSpecies, idealGas) {
//  $mixtureCp_ic = $mixtureGamma_ic*$mixtureR_ic/($mixtureGamma_ic-1.0);
//}

//$rule pointwise(mixtureEnthalpy_ic <- mixtureCp_ic, temperature_ic),
//constraint(geom_cells, multiSpecies, idealGas) {
//  $mixtureEnthalpy_ic = $mixtureCp_ic*$temperature_ic;
//}

//$rule apply(gagePressure_ic)[Loci::Summation], constraint(geom_cells) {
//  double P = 101325.0;
//  join($gagePressure_ic, P);
//}
//
//$rule apply(velocity_ic)[Loci::Summation], constraint(geom_cells) {
//  Loci::vector3d<double> U(100.0, 0.0, 0.0);
//  join($velocity_ic, U);
//}
//
//$rule apply(temperature_ic)[Loci::Summation], constraint(geom_cells) {
//  double T = 300.0;
//  join($temperature_ic, T);
//}

$rule singleton(timeStep_ic), constraint(UNIVERSE) {
  $timeStep_ic = 0;
}

$rule singleton(stime_ic), constraint(UNIVERSE) {
  $stime_ic = 0;
}
