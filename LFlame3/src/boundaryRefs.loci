#include <flame.hh>

$include "flame.lh"
$include "FVM.lh"

namespace flame {

// =============================================================================
// Copy boundary reference state from boundary specification.
// -----------------------------------------------------------------------------

$rule pointwise(gagePressureRef <- ref->gagePressureRef_BC) {
  $gagePressureRef = $ref->$gagePressureRef_BC;
}

$rule pointwise(temperatureRef <- ref->temperatureRef_BC) {
  $temperatureRef = $ref->$temperatureRef_BC;
}

$rule pointwise(velocityRef <- ref->velocityRef_BC) {
  $velocityRef = $ref->$velocityRef_BC;
}

$rule pointwise(speciesYRef <- ref->speciesYRef_BC, Ns), prelude {
  $speciesYRef.setVecSize(*$Ns);
} {
  $speciesYRef = $ref->$speciesYRef_BC;
}

// =============================================================================
// Calculation of boundary reference molar fractions.
// -----------------------------------------------------------------------------

$rule pointwise(speciesXRef <- speciesYRef, mixtureWRef, speciesW, Ns), prelude {
  $speciesXRef.setVecSize(*$Ns);
} {
  for(int i = 0; i < $Ns; ++i) {
    $speciesXRef[i] = $speciesYRef[i]*$mixtureWRef/$speciesW[i];
  }
}

// =============================================================================
// Calculation of boundary reference density.
// -----------------------------------------------------------------------------

// For thermally perfect gas.
$rule pointwise(densityRef <- gagePressureRef, temperatureRef, mixtureRRef, Pambient),
constraint(thermallyPerfectGas, temperatureRef, gagePressureRef) {
  $densityRef = ($gagePressureRef+$Pambient)/($mixtureRRef*$temperatureRef);
}

// =============================================================================
// Calculation of boundary reference molecular weight and gas constant.
// -----------------------------------------------------------------------------

$rule pointwise(mixtureWRef, mixtureRRef <- speciesW, Runiv),
constraint(singleSpecies, boundary_faces) {
  $mixtureWRef = $speciesW[0];
  $mixtureRRef = $Runiv/$speciesW[0];
}

// multi-species
$rule pointwise(mixtureWRef, mixtureRRef <- speciesYRef, speciesW, Runiv, Ns),
constraint(multiSpecies, speciesYRef) {
  double Winv = 0.0;
  for(int i = 0; i < $Ns; ++i) {
    Winv += $speciesYRef[i]/$speciesW[i];
  }
  $mixtureWRef = 1.0/Winv;
  $mixtureRRef = $Runiv*Winv;
}

// =============================================================================
// Calculation of boundary reference specific heat.
// -----------------------------------------------------------------------------

// Species specific heat: calorically perfect gas + multi-species
$rule pointwise(speciesCpRef <- speciesCp_Constant, Ns),
constraint(caloricallyPerfectGas, multiSpecies, temperatureRef), prelude {
  $speciesCpRef.setVecSize(*$Ns);
} {
  for(int i = 0; i < $Ns; ++i) {
    $speciesCpRef[i] = $speciesCp_Constant[i];
  }
}

// Mixture specific heat: calorically perfect gas + multi-species
$rule pointwise(mixtureCpRef <- speciesCpRef, speciesYRef, Ns) {
  $mixtureCpRef = 0.0;
  for(int i = 0; i < $Ns; ++i) {
    $mixtureCpRef += $speciesYRef[i]*$speciesCpRef[i];
  }
}

// Mixture specific heat: calorically perfect gas + single-species
$rule pointwise(mixtureCpRef <- speciesCp_Constant),
constraint(caloricallyPerfectGas, singleSpecies, temperatureRef) {
  $mixtureCpRef = $speciesCp_Constant[0];
}

// =============================================================================
// Calculation of boundary reference specific enthalpy.
// -----------------------------------------------------------------------------

// Species specific enthalpy: calorically perfect gas + multi-species
$rule pointwise(speciesEnthalpyRef <- speciesCp_Constant, temperatureRef, Ns),
constraint(caloricallyPerfectGas, multiSpecies, temperatureRef), prelude {
  $speciesEnthalpyRef.setVecSize(*$Ns);
} {
  for(int i = 0; i < $Ns; ++i) {
    $speciesEnthalpyRef[i] = $speciesCp_Constant[i]*$temperatureRef;
  }
}

// Mixture specific enthalpy: calorically perfect gas + multi-species
$rule pointwise(mixtureEnthalpyRef <- speciesEnthalpyRef, speciesYRef, Ns) {
  $mixtureEnthalpyRef = 0.0;
  for(int i = 0; i < $Ns; ++i) {
    $mixtureEnthalpyRef += $speciesYRef[i]*$speciesEnthalpyRef[i];
  }
}

// Mixture specific enthalpy: calorically perfect gas + single-species
$rule pointwise(mixtureEnthalpyRef <- speciesCp_Constant, temperatureRef) {
  $mixtureEnthalpyRef = $speciesCp_Constant[0]*$temperatureRef;
}

// =============================================================================
// Calculation of boundary reference speed of sound.
// -----------------------------------------------------------------------------

// For thermally perfect gas.
$rule pointwise(soundSpeedRef <- temperatureRef, mixtureCpRef, mixtureRRef),
constraint(thermallyPerfectGas, temperatureRef) {
  double const & Cp = $mixtureCpRef;
  double const & R = $mixtureRRef;
  double const & T = $temperatureRef;
  $soundSpeedRef = sqrt((Cp*R*T)/(Cp-R));
}

// =============================================================================

} // end: namespace flame
