$include "FVM.lh"
$include "flame.lh"

#include <Loci.h>

namespace flame {

// =============================================================================

$rule default(eosType) {
  $eosType = "idealGas";
}

$rule constraint(idealGas <- eosType) {
  $idealGas = EMPTY;
  if($eosType == "idealGas") {
    $idealGas = ~EMPTY;
  } else {
    std::cerr << "Invalid value of eosType: " << $eosType << std::endl;
    Loci::Abort();
  }
}

// =============================================================================

$rule pointwise(density <- temperature, gagePressure, speciesR, Pambient),
constraint(singleSpecies, idealGas, geom_cells) {
  $density = ($gagePressure+$Pambient)/($speciesR[0]*$temperature);
}

$rule pointwise(density_f <- temperature_f, gagePressure_f, speciesR, Pambient),
constraint(singleSpecies, idealGas, area) {
  $density_f = ($gagePressure_f+$Pambient)/($speciesR[0]*$temperature_f);
}

$rule pointwise(density <- temperature, gagePressure, mixtureR, Pambient),
constraint(multiSpecies, idealGas, geom_cells) {
  $density = ($gagePressure+$Pambient)/($mixtureR*$temperature);
}

$rule pointwise(density_f <- temperature_f, gagePressure_f, mixtureR_f, Pambient),
constraint(multiSpecies, idealGas, area) {
  $density_f = ($gagePressure_f+$Pambient)/($mixtureR_f*$temperature_f);
}

// =============================================================================

//$rule singleton(speciesConstantGamma <- speciesConstantCp, speciesR, Ns),
//  constraint(idealGas, caloricallyPerfectGas) {
//  for(int i = 0; i < $Ns; ++i) {
//    $speciesConstantGamma[i] = $speciesConstantCp[i]/($speciesConstantCp[i]-$speciesR[i]);
//  }
//}
//
//$rule pointwise(mixtureGamma <- mixtureCp, mixtureR),
//  constraint(idealGas, caloricallyPerfectGas) {
//  $mixtureGamma = $mixtureCp/($mixtureCp-$mixtureR);
//}
//
//// =============================================================================
//
//$rule pointwise(soundSpeed <- temperature, speciesConstantGamma, speciesR),
//  constraint(singleSpecies, idealGas, caloricallyPerfectGas, geom_cells) {
//  $soundSpeed = sqrt($speciesConstantGamma[0]*$speciesR[0]*$temperature);
//}
//
//$rule pointwise(soundSpeed_f <- temperature_f, speciesConstantGamma, speciesR),
//  constraint(singleSpecies, idealGas, caloricallyPerfectGas, area) {
//  $soundSpeed_f = sqrt($speciesConstantGamma[0]*$speciesR[0]*$temperature_f);
//}

} // end: namespace flame
