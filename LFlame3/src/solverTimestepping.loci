#include <flame.hh>
#include <plot.hh>

$include "flame.lh"
$include "FVM.lh"

#include <glog/logging.h>

namespace flame {

// =============================================================================
// Default values for parameters that control the time loop.
// =============================================================================

$rule default(nTimeSteps) {
  $nTimeSteps = 10;
}

$rule default(timeStepSize) {
  $timeStepSize = 1e-5;
}

$rule default(timeIntegrationMethod) {
  $timeIntegrationMethod = "rk";
}

// =============================================================================
// Calculation of constraints that define time integration scheme.
// =============================================================================

$rule constraint(timeIntegrationRK <- timeIntegrationMethod) {
  $timeIntegrationRK = EMPTY;
  if($timeIntegrationMethod == "rk") {
    $timeIntegrationRK = ~EMPTY;
  } else {
    $[Once] {
      LOG(ERROR) << "unknown timeIntegrationMethod " << $timeIntegrationMethod;
    }
    Loci::Abort();
  }
}

// =============================================================================
// Set unit values for single-species source term.
// =============================================================================

$rule unit(ssResidual), constraint(geom_cells, singleSpecies) {
  $ssResidual[0] = 0.0;
  $ssResidual[1] = 0.0;
  $ssResidual[2] = 0.0;
  $ssResidual[3] = 0.0;
  $ssResidual[4] = 0.0;
}

// =============================================================================
// Set unit values for multi-species source term.
// =============================================================================

$rule unit(msResidual <- Ns), constraint(geom_cells, multiSpecies), prelude {
  $msResidual.setVecSize(*$Ns+4);
} {
  $msResidual = mk_Scalar(0.0);
}

// =============================================================================
// Integrate single-species convective and diffusive flux over faces of a cell
// to compute contribution to the source term at a cell.
// =============================================================================

// Add convetive contribution from a face to its left cell.
$rule apply((cl,cr)->ssResidual <- ssConvectiveFlux_f)[Loci::Summation],
constraint((cl,cr)->geom_cells, singleSpecies) {
  for(int i = 0; i < 5; ++i) {
    $cl->$ssResidual[i] -= $ssConvectiveFlux_f[i];
    $cr->$ssResidual[i] += $ssConvectiveFlux_f[i];
  }
}

// Add convective contribution from a face to its right cell.
$rule apply(cl->ssResidual <- ssConvectiveFlux_f)[Loci::Summation],
constraint(boundary_faces, singleSpecies) {
  for(int i = 0; i < 5; ++i) {
    $cl->$ssResidual[i] -= $ssConvectiveFlux_f[i];
  }
}

// Add diffusive contribution from a face to its left cell.
$rule apply((cl,cr)->ssResidual <- viscousFlux_f)[Loci::Summation],
constraint((cl,cr)->geom_cells, singleSpecies, viscousFlow) {
  for(int i = 0; i < 4; ++i) {
    $cl->$ssResidual[i] += $viscousFlux_f[i];
    $cr->$ssResidual[i] -= $viscousFlux_f[i];
  }
}

// Add diffusive contribution from a face to its right cell.
$rule apply(cl->ssResidual <- viscousFlux_f)[Loci::Summation],
constraint(boundary_faces, singleSpecies, viscousFlow) {
  for(int i = 0; i < 4; ++i) {
    $cl->$ssResidual[i] += $viscousFlux_f[i];
  }
}

// =============================================================================
// Integrate multi-species convective and diffusive flux over faces of a cell to
// compute contribution to the source term at a cell.
// =============================================================================

// Add convective contribution from a face to its left cell.
$rule apply((cl,cr)->msResidual <- msConvectiveFlux_f, Ns)[Loci::Summation],
constraint((cl,cr)->geom_cells, multiSpecies) {
  for(int i = 0; i < $Ns+4; ++i) {
    $cl->$msResidual[i] -= $msConvectiveFlux_f[i];
    $cr->$msResidual[i] += $msConvectiveFlux_f[i];
  }
}

// Add convective contribution from a face to its right cell.
$rule apply(cl->msResidual <- msConvectiveFlux_f, Ns)[Loci::Summation],
constraint(boundary_faces, multiSpecies) {
  for(int i = 0; i < $Ns+4; ++i) {
    $cl->$msResidual[i] -= $msConvectiveFlux_f[i];
  }
}

// Add diffusive contribution from a face to its left cell.
$rule apply((cl,cr)->msResidual <- viscousFlux_f)[Loci::Summation],
constraint((cl,cr)->geom_cells, multiSpecies, viscousFlow) {
  for(int i = 0; i < 4; ++i) {
    $cl->$msResidual[i] += $viscousFlux_f[i];
    $cr->$msResidual[i] -= $viscousFlux_f[i];
  }
}

// Add diffusive contribution from a face to its right cell.
$rule apply(cl->msResidual <- viscousFlux_f, Ns)[Loci::Summation],
constraint(boundary_faces, multiSpecies, viscousFlow) {
  for(int i = 0; i < 4; ++i) {
    $cl->$msResidual[i] += $viscousFlux_f[i];
  }
}

$rule apply((cl,cr)->msResidual <- msDiffusiveFlux_f, Ns)[Loci::Summation],
  constraint((cl,cr)->geom_cells, multiSpecies, speciesMassDiffusionEnabled) {
    for(int i = 5; i < $Ns+4; ++i) {
      $cl->$msResidual[i] += $msDiffusiveFlux_f[i-5];
      $cr->$msResidual[i] -= $msDiffusiveFlux_f[i-5];
    }
}

$rule apply(cl->msResidual <- msDiffusiveFlux_f, Ns)[Loci::Summation],
  constraint(boundary_faces, multiSpecies, speciesMassDiffusionEnabled) {
    for(int i = 5; i < $Ns+4; ++i) {
      $cl->$msResidual[i] += $msDiffusiveFlux_f[i-5];
    }
}

// =============================================================================
// Time loop initialization.
// =============================================================================

$rule singleton(timeStep{n=0} <- timeStep_ic) {
  $timeStep{n=0} = $timeStep_ic;
}

$rule singleton(stime{n=0} <- stime_ic) {
  $stime{n=0} = $stime_ic;
}

$rule pointwise(gagePressure{n=0} <- gagePressure_ic) {
  $gagePressure{n=0} = $gagePressure_ic;
}

$rule pointwise(temperature{n=0} <- temperature_ic) {
  $temperature{n=0} = $temperature_ic;
}

$rule pointwise(velocity{n=0} <- velocity_ic) {
  $velocity{n=0} = $velocity_ic;
}

$rule pointwise(speciesY{n=0} <- speciesY_ic, Ns), prelude {
  $speciesY{n=0}.setVecSize(*$Ns);
} {
  $speciesY{n=0} = $speciesY_ic;
}

$rule pointwise(mixtureW{n} <- speciesY{n}, speciesW, Ns),
constraint(geom_cells) {
  double rW = 0.0;
  for(int i = 0; i < $Ns; ++i) {
    rW += $speciesY{n}[i]/$speciesW[i];
  }
  $mixtureW{n} = 1.0/rW;
}

$rule pointwise(mixtureR{n} <- mixtureW{n}, Runiv),
constraint(geom_cells) {
  $mixtureR{n} = $Runiv/$mixtureW{n};
}

$rule pointwise(speciesX{n} <- speciesY{n}, mixtureW{n}, speciesW, Ns),
constraint(geom_cells), prelude {
  $speciesX{n}.setVecSize(*$Ns);
} {
  for(int i = 0; i < $Ns; ++i) {
    $speciesX{n}[i] = $speciesY{n}[i]*$mixtureW{n}/$speciesW[i];
  }
}

$rule pointwise(mixtureCp{n} <- speciesY{n}, speciesCp_Constant, Ns),
constraint(geom_cells, multiSpecies) {
  double Cp = 0.0;
  for(int i = 0; i < $Ns; ++i) {
    Cp += $speciesY{n}[i]*$speciesCp_Constant[i];
  }
  $mixtureCp{n} = Cp;
}

// =============================================================================
// Time loop advance: These are specific to the time integration scheme. Hence,
// they are written in files specific to the scheme.
// =============================================================================


// =============================================================================
// Time loop collapse.
// =============================================================================

$rule singleton(timeStepFinished{n} <- $n{n}, timeStep{n}, nTimeSteps) {
  $timeStepFinished{n} = $$n{n} >= $nTimeSteps; //$timeStep{n} == $nTimeSteps;
}

$rule pointwise(solution <- gagePressure{n}, velocity{n}, temperature{n}),
constraint(geom_cells{n}, singleSpecies),
conditional(timeStepFinished{n}),
inplace(solution|gagePressure{n}), prelude {};

$rule pointwise(solution <- gagePressure{n}, velocity{n}, temperature{n},
speciesY{n}), constraint(geom_cells{n}, multiSpecies),
conditional(timeStepFinished{n}),
inplace(solution|gagePressure{n}), prelude {};

// =============================================================================

} // end: namespace flame
