#include <flame.hh>
#include <plot.hh>
#include <eos.hh>

$include "flame.lh"
$include "FVM.lh"

#define GLOG_USE_GLOG_EXPORT
#include <glog/logging.h>

namespace flame {

// =============================================================================
// Default values for parameters that control the time loop.
// =============================================================================

$rule optional(nTimeSteps) {
  $nTimeSteps = 10;
}

$rule optional(stopTimeStep) {
  $stopTimeStep = 0;
}

$rule default(timeStepSize) {
  $timeStepSize = 1e-5;
}

$rule default(timeIntegrationMethod) {
  $timeIntegrationMethod = "rk";
}

// =============================================================================
// Calculation of constraints that define time integration scheme.
// =============================================================================

$rule constraint(timeIntegrationRK <- timeIntegrationMethod) {
  $timeIntegrationRK = EMPTY;
  if($timeIntegrationMethod == "rk") {
    $timeIntegrationRK = ~EMPTY;
  } else {
    $[Once] {
      LOG(ERROR) << "unknown timeIntegrationMethod " << $timeIntegrationMethod;
    }
    Loci::Abort();
  }
}

// =============================================================================
// Set unit values for single-species source term.
// =============================================================================

$rule unit(ssResidual), constraint(geom_cells, singleSpecies) {
  $ssResidual[0] = 0.0;
  $ssResidual[1] = 0.0;
  $ssResidual[2] = 0.0;
  $ssResidual[3] = 0.0;
  $ssResidual[4] = 0.0;
}

// =============================================================================
// Set unit values for multi-species source term.
// =============================================================================

$rule unit(msResidual <- Ns), constraint(geom_cells, multiSpecies), prelude {
  $msResidual.setVecSize(*$Ns+4);
} {
  $msResidual = mk_Scalar(0.0);
}

// =============================================================================
// Integrate single-species convective and diffusive flux over faces of a cell
// to compute contribution to the source term at a cell.
// =============================================================================

// Add convetive contribution from internal faces to left and right
// cells.
$rule apply((cl,cr)->ssResidual <- ssConvectiveFlux_f)[Loci::Summation],
constraint((cl,cr)->geom_cells, singleSpecies) {
  for(int i = 0; i < 5; ++i) {
    $cl->$ssResidual[i] -= $ssConvectiveFlux_f[i];
    $cr->$ssResidual[i] += $ssConvectiveFlux_f[i];
  }
}

// Add convective contribution from boundary faces to left cells.
$rule apply(cl->ssResidual <- ssConvectiveFlux_f)[Loci::Summation],
constraint(boundary_faces, singleSpecies) {
  for(int i = 0; i < 5; ++i) {
    $cl->$ssResidual[i] -= $ssConvectiveFlux_f[i];
  }
}

// Add diffusive contribution from internal faces to left and right
// cells.
$rule apply((cl,cr)->ssResidual <- viscousFlux_f)[Loci::Summation],
constraint((cl,cr)->geom_cells, singleSpecies, viscousFlow) {
  for(int i = 0; i < 4; ++i) {
    $cl->$ssResidual[i] += $viscousFlux_f[i];
    $cr->$ssResidual[i] -= $viscousFlux_f[i];
  }
}

// Add diffusive contribution from boundary faces to left cells.
$rule apply(cl->ssResidual <- viscousFlux_f)[Loci::Summation],
constraint(boundary_faces, singleSpecies, viscousFlow) {
  for(int i = 0; i < 4; ++i) {
    $cl->$ssResidual[i] += $viscousFlux_f[i];
  }
}

// =============================================================================
// Integrate multi-species convective and diffusive flux over faces of a cell to
// compute contribution to the source term at a cell.
// =============================================================================

// Add convective contribution from internal faces to left and right
// cells.
$rule apply((cl,cr)->msResidual <- msConvectiveFlux_f, Ns)[Loci::Summation],
constraint((cl,cr)->geom_cells, multiSpecies) {
  for(int i = 0; i < $Ns+4; ++i) {
    $cl->$msResidual[i] -= $msConvectiveFlux_f[i];
    $cr->$msResidual[i] += $msConvectiveFlux_f[i];
  }
}

// Add convective contribution from boundary faces to left cells.
$rule apply(cl->msResidual <- msConvectiveFlux_f, Ns)[Loci::Summation],
constraint(boundary_faces, multiSpecies) {
  for(int i = 0; i < $Ns+4; ++i) {
    $cl->$msResidual[i] -= $msConvectiveFlux_f[i];
  }
}

// Add viscous contribution from internal faces to left and right
// cells.
$rule apply((cl,cr)->msResidual <- viscousFlux_f)[Loci::Summation],
constraint((cl,cr)->geom_cells, multiSpecies, viscousFlow) {
  for(int i = 0; i < 4; ++i) {
    $cl->$msResidual[i] += $viscousFlux_f[i];
    $cr->$msResidual[i] -= $viscousFlux_f[i];
  }
}

// Add viscous contribution from boundary faces to left cells.
$rule apply(cl->msResidual <- viscousFlux_f, Ns)[Loci::Summation],
constraint(boundary_faces, multiSpecies, viscousFlow) {
  for(int i = 0; i < 4; ++i) {
    $cl->$msResidual[i] += $viscousFlux_f[i];
  }
}

  // Add diffusive contribution from internal faces to left and right
// cells.
$rule apply((cl,cr)->msResidual <- msDiffusiveFlux_f, Ns)[Loci::Summation],
  constraint((cl,cr)->geom_cells, multiSpecies, speciesMassDiffusionEnabled) {
    for(int i = 5; i < $Ns+4; ++i) {
      $cl->$msResidual[i] += $msDiffusiveFlux_f[i-5];
      $cr->$msResidual[i] -= $msDiffusiveFlux_f[i-5];
    }
}

  // Add diffusive contribution from boundary faces to left cells.
$rule apply(cl->msResidual <- msDiffusiveFlux_f, Ns)[Loci::Summation],
  constraint(boundary_faces, multiSpecies, speciesMassDiffusionEnabled) {
    for(int i = 5; i < $Ns+4; ++i) {
      $cl->$msResidual[i] += $msDiffusiveFlux_f[i-5];
    }
}

// =============================================================================
// Time loop initialization.
// =============================================================================

$rule singleton(timeStep{n=0} <- timeStep_ic) {
  $timeStep{n=0} = $timeStep_ic;
}

$rule singleton(stime{n=0} <- stime_ic) {
  $stime{n=0} = $stime_ic;
}

$rule pointwise(gagePressure{n=0} <- gagePressure_ic),
constraint(geom_cells) {
  $gagePressure{n=0} = $gagePressure_ic;
}

$rule pointwise(temperature{n=0} <- temperature_ic),
constraint(geom_cells) {
  $temperature{n=0} = $temperature_ic;
}

$rule pointwise(velocity{n=0} <- velocity_ic),
constraint(geom_cells) {
  $velocity{n=0} = $velocity_ic;
}

$rule pointwise(speciesY{n=0} <- speciesY_ic, Ns),
constraint(geom_cells, multiSpecies), prelude {
  $speciesY{n=0}.setVecSize(*$Ns);
} {
  $speciesY{n=0} = $speciesY_ic;
}

$rule pointwise(density{n=0} <- density_ic),
constraint(geom_cells) {
  $density{n=0} = $density_ic;
}

$rule pointwise(mixtureW{n=0} <- mixtureW_ic),
constraint(geom_cells) {
  $mixtureW{n=0} = $mixtureW_ic;
}

$rule pointwise(mixtureR{n=0} <- mixtureR_ic),
constraint(geom_cells) {
  $mixtureR{n=0} = $mixtureR_ic;
}

$rule pointwise(speciesX{n=0} <- speciesX_ic, Ns),
constraint(geom_cells, multiSpecies), prelude {
  $speciesX{n=0}.setVecSize(*$Ns);
} {
  $speciesX{n=0} = $speciesX_ic;
}

$rule pointwise(speciesCp{n=0} <- speciesCp_ic, Ns),
constraint(geom_cells, multiSpecies), prelude {
  $speciesCp{n=0}.setVecSize(*$Ns);
} {
  $speciesCp{n=0} = $speciesCp_ic;
}

$rule pointwise(speciesEnthalpy{n=0} <- speciesEnthalpy_ic, Ns),
constraint(geom_cells, multiSpecies), prelude {
  $speciesEnthalpy{n=0}.setVecSize(*$Ns);
} {
  $speciesEnthalpy{n=0} = $speciesEnthalpy_ic;
}

$rule pointwise(mixtureCp{n=0} <- mixtureCp_ic),
constraint(geom_cells) {
  $mixtureCp{n=0} = $mixtureCp_ic;
}

$rule pointwise(mixtureEnthalpy{n=0} <- mixtureEnthalpy_ic),
constraint(geom_cells) {
  $mixtureEnthalpy{n=0} = $mixtureEnthalpy_ic;
}

// =============================================================================
// Calculation of time-step specific variables.
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Single-species calculations.
// -----------------------------------------------------------------------------

// Calculation of conservative variables.
$rule pointwise(
  ssQ{n}
  <-
  gagePressure{n}, density{n}, velocity{n}, temperature{n},
  mixtureEnthalpy{n}, vol{n}, Pambient
), constraint(singleSpecies, geom_cells) {
  Loci::Array<double, 5> & Q = $ssQ{n};
  
  double const P = $gagePressure{n}+$Pambient;
  double const rho = $density{n};
  double const h0 = $mixtureEnthalpy{n} + 0.5*dot($velocity{n}, $velocity{n});
  double const vol = $vol{n};
  
  double const vr = vol*rho;
  Loci::vector3d<double> vm = vol*rho*$velocity{n};
  double const ve = vol*(rho*h0 - P);
  
  Q[0] = vm[0];
  Q[1] = vm[1];
  Q[2] = vm[2];
  Q[3] = ve;
  Q[4] = vr;
}

// -----------------------------------------------------------------------------
// Multi-species calculations.
// -----------------------------------------------------------------------------

// Calculation of conservative variables.
$rule pointwise(
  msQ{n}
  <-
  gagePressure{n}, density{n}, velocity{n}, temperature{n}, speciesY{n},
  mixtureEnthalpy{n}, vol{n}, Pambient, Ns
), constraint(multiSpecies, geom_cells), prelude {
  $msQ{n}.setVecSize(*$Ns+4);
} {
  Vect<double> Q = $msQ{n};
  const_Vect<double> Y = $speciesY{n};
  
  double const P = $gagePressure{n}+$Pambient;
  double const rho = $density{n};
  double const h0 = $mixtureEnthalpy{n} + 0.5*dot($velocity{n}, $velocity{n});
  double const vol = $vol{n};
  
  double const vr = vol*rho;
  Loci::vector3d<double> vm = vol*rho*$velocity{n};
  double const ve = vol*(rho*h0 - P);
  
  Q[0] = vm[0];
  Q[1] = vm[1];
  Q[2] = vm[2];
  Q[3] = ve;
  Q[4] = vr;
  for(int i = 0; i < $Ns-1; ++i) {
    Q[i+5] = Y[i]*vr;
  }
}

// =============================================================================
// Time loop advance: These are specific to the time integration scheme. Hence,
// they are written in files specific to the scheme.
// =============================================================================


// =============================================================================
// Time loop collapse.
// =============================================================================

$rule singleton(timeStepFinished{n} <- $n{n}, timeStep{n}, nTimeSteps) {
  $timeStepFinished{n} = $$n{n} >= $nTimeSteps;
}

$rule singleton(timeStepFinished{n} <- $n{n}, timeStep{n}, stopTimeStep) {
  $timeStepFinished{n} = $timeStep{n} >= $stopTimeStep;
}

$rule pointwise(solution <- gagePressure{n}, velocity{n}, temperature{n}),
constraint(geom_cells, singleSpecies),
conditional(timeStepFinished{n}),
inplace(solution|gagePressure{n}), prelude {};

$rule pointwise(solution <- gagePressure{n}, velocity{n}, temperature{n},
speciesY{n}), constraint(geom_cells, multiSpecies),
conditional(timeStepFinished{n}),
inplace(solution|gagePressure{n}), prelude {};

// =============================================================================

} // end: namespace flame
