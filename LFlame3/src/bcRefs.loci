#include <flame.hh>

$include "flame.lh"
$include "FVM.lh"

namespace flame {

// =============================================================================
// Calculation of boundary temperature specification.
// -----------------------------------------------------------------------------

// Direct specification.
$rule pointwise(temperatureRef_BC <- temperature_BC),
constraint(temperature_BCoption) {
  $temperatureRef_BC = $temperature_BC;
}

// From pressure and density, for thermally perfect gas.
$rule pointwise(temperatureRef_BC <- pressure_BC, density_BC, mixtureRRef_BC),
constraint(thermallyPerfectGas, pressure_BCoption, density_BCoption) {
  double const & rho = $density_BC;
  double const & p = $pressure_BC;
  double const & R = $mixtureRRef_BC;
  $temperatureRef_BC = p/(rho*R);
}

// =============================================================================
// Calculation of boundary pressure specification.
// -----------------------------------------------------------------------------

// Direct specification.
$rule pointwise(gagePressureRef_BC <- pressure_BC, Pambient),
constraint(pressure_BCoption) {
  $gagePressureRef_BC = $pressure_BC - $Pambient;
}

// From density and temperature, for thermally perfect gas.
$rule pointwise(
  gagePressureRef_BC <- density_BC, temperature_BC, mixtureRRef_BC, Pambient
), constraint(thermallyPerfectGas, density_BCoption, temperature_BCoption) {
  double const & rho = $density_BC;
  double const & T = $temperature_BC;
  double const & R = $mixtureRRef_BC;
  $gagePressureRef_BC = rho*R*T - $Pambient;
}

// =============================================================================
// Calculation of boundary velocity specification.
// -----------------------------------------------------------------------------

// Direct specification.
$rule pointwise(velocityRef_BC <- velocity_BC), constraint(velocity_BCoption) {
  $velocityRef_BC = $velocity_BC;
}

// From Mach number, for thermally perfect gas.
$rule pointwise(velocityRef_BC <- Mach_BC, soundSpeedRef_BC),
constraint(Mach_BCoption) {
  $velocityRef_BC = $Mach_BC*$soundSpeedRef_BC;
}

// =============================================================================
// Calculation of boundary mass fractions specification.
// -----------------------------------------------------------------------------

// Direct specification.
$rule pointwise(speciesYRef_BC <- massFractions_BC, Ns),
constraint(multiSpecies, massFractions_BCoption), prelude {
  $speciesYRef_BC.setVecSize(*$Ns);
} {
  $speciesYRef_BC = $massFractions_BC;
}

// From molar fractions.
$rule pointwise(speciesYRef_BC <- molarFractions_BC, speciesW, mixtureWRef_BC, Ns),
constraint(multiSpecies, molarFractions_BCoption), prelude {
  $speciesYRef_BC.setVecSize(*$Ns);
} {
  for(int i = 0; i < $Ns; ++i) {
    $speciesYRef_BC[i] = $molarFractions_BC[i]*$speciesW[i]/$mixtureWRef_BC;
  }
}

// =============================================================================
// Calculation of boundary molar fractions specification.
// -----------------------------------------------------------------------------

// Direct specification.
$rule pointwise(speciesXRef_BC <- molarFractions_BC, Ns),
  constraint(multiSpecies, molarFractions_BCoption), prelude {
  $speciesXRef_BC.setVecSize(*$Ns);
} {
  $speciesXRef_BC = $molarFractions_BC;
}

// From mass fractions.
$rule pointwise(speciesXRef_BC <- massFractions_BC, speciesW, mixtureWRef_BC, Ns),
  constraint(multiSpecies, massFractions_BCoption), prelude {
  $speciesXRef_BC.setVecSize(*$Ns);
} {
  for(int i = 0; i < $Ns; ++i) {
    $speciesXRef_BC[i] = $massFractions_BC[i]*$mixtureWRef_BC/$speciesW[i];
  }
}

// =============================================================================
// Calculation of boundary density specifiation
// -----------------------------------------------------------------------------

// Direct specification.
$rule pointwise(densityRef_BC <- density_BC), constraint(density_BCoption) {
  $densityRef_BC = $density_BC;
}

// From pressure and temperature, for thermally perfect gas.
$rule pointwise(
  densityRef_BC <- pressure_BC, temperature_BC, mixtureRRef_BC
), constraint(thermallyPerfectGas, temperatureRef_BC) {
  $densityRef_BC = $pressure_BC/($mixtureRRef_BC*$temperature_BC);
}

// =============================================================================
// Calculation of boundary molecular weight and gas constant.
// -----------------------------------------------------------------------------

// For single-species.
$rule pointwise(
  mixtureWRef_BC, mixtureRRef_BC <- speciesW, Runiv
), constraint(singleSpecies, boundary_faces) {
  $mixtureWRef_BC = $speciesW[0];
  $mixtureRRef_BC = $Runiv/$speciesW[0];
}

// From mass fractions specification, for multi-species.
$rule pointwise(
  mixtureWRef_BC, mixtureRRef_BC <- massFractions_BC, speciesW, Runiv, Ns
), constraint(multiSpecies, massFractions_BCoption) {
  double Winv = 0.0;
  for(int i = 0; i < $Ns; ++i) {
    Winv += $massFractions_BC[i]/$speciesW[i];
  }
  $mixtureWRef_BC = 1.0/Winv;
  $mixtureRRef_BC = $Runiv*Winv;
}

// From molar fractions specification, for multi-species.
$rule pointwise(
  mixtureWRef_BC, mixtureRRef_BC <- molarFractions_BC, speciesW, Runiv, Ns
), constraint(multiSpecies, molarFractions_BCoption) {
  double W = 0.0;
  for(int i = 0; i < $Ns; ++i) {
    W += $molarFractions_BC[i]*$speciesW[i];
  }
  $mixtureWRef_BC = W;
  $mixtureRRef_BC = $Runiv/W;
}

// =============================================================================
// Calculation of specific heat from boundary specification.
// -----------------------------------------------------------------------------

// Species specific heat: calorically perfect gas + multi-species
$rule pointwise(speciesCpRef_BC <- speciesCp_Constant, Ns),
constraint(caloricallyPerfectGas, multiSpecies, temperatureRef_BC), prelude {
  $speciesCpRef_BC.setVecSize(*$Ns);
} {
  for(int i = 0; i < $Ns; ++i) {
    $speciesCpRef_BC[i] = $speciesCp_Constant[i];
  }
}

// Mixture specific heat: calorically perfect gas + multi-species
$rule pointwise(mixtureCpRef_BC <- speciesCpRef_BC, speciesYRef_BC, Ns) {
  $mixtureCpRef_BC = 0.0;
  for(int i = 0; i < $Ns; ++i) {
    $mixtureCpRef_BC += $speciesYRef_BC[i]*$speciesCpRef_BC[i];
  }
}

// Mixture specific heat: calorically perfect gas + single-species
$rule pointwise(mixtureCpRef_BC <- speciesCp_Constant),
constraint(caloricallyPerfectGas, singleSpecies, temperatureRef_BC) {
  $mixtureCpRef_BC = $speciesCp_Constant[0];
}

// =============================================================================
// Calculation of specific enthalpy from boundary specifications.
// -----------------------------------------------------------------------------

// Species specific enthalpy: calorically perfect gas + multi-species
$rule pointwise(speciesEnthalpyRef_BC <- speciesCp_Constant, temperatureRef_BC, Ns),
constraint(caloricallyPerfectGas, multiSpecies, temperatureRef_BC), prelude {
  $speciesEnthalpyRef_BC.setVecSize(*$Ns);
} {
  for(int i = 0; i < $Ns; ++i) {
    $speciesEnthalpyRef_BC[i] = $speciesCp_Constant[i]*$temperatureRef_BC;
  }
}

// Mixture specific enthalpy: calorically perfect gas + multi-species
$rule pointwise(mixtureEnthalpyRef_BC <- speciesEnthalpyRef_BC, speciesYRef_BC, Ns) {
  $mixtureEnthalpyRef_BC = 0.0;
  for(int i = 0; i < $Ns; ++i) {
    $mixtureEnthalpyRef_BC += $speciesYRef_BC[i]*$speciesEnthalpyRef_BC[i];
  }
}

// Mixture specific enthalpy: calorically perfect gas + single-species
$rule pointwise(mixtureEnthalpyRef_BC <- speciesCp_Constant, temperatureRef_BC),
constraint(caloricallyPerfectGas, singleSpecies, temperatureRef_BC) {
  $mixtureEnthalpyRef_BC = $speciesCp_Constant[0]*$temperatureRef_BC;
}

// =============================================================================
// Calculation of speed of sound from boundary specifications.
// -----------------------------------------------------------------------------

// For thermally perfect gas.
$rule pointwise(soundSpeedRef_BC <- temperatureRef_BC, mixtureCpRef_BC, mixtureRRef_BC),
constraint(thermallyPerfectGas, temperatureRef_BC) {
  double const & Cp = $mixtureCpRef_BC;
  double const & R = $mixtureRRef_BC;
  double const & T = $temperatureRef_BC;
  $soundSpeedRef_BC = sqrt(Cp*R*T/(Cp-R));
}

// =============================================================================

} // end: namespace flame
